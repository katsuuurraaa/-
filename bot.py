

import json
import random
from datetime import datetime, UTC
from aiogram import Router, F
import time
from collections import defaultdict
from aiogram import Bot
from aiogram.types import Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import Dispatcher, types
from aiogram.enums import ParseMode
from config import TOKEN, ADMINS, MODERATORS
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
import aiohttp
from aiogram import types

import random
from collections import defaultdict
from aiogram import Bot, Dispatcher
from aiogram import Bot, Dispatcher
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, Message
from aiogram.fsm.context import FSMContext
API_TOKEN = "7750083612:AAG2BGjYAHPtY4bkSZetxlJ4fmDa-6jEqKA"
bot = Bot(token="7750083612:AAG2BGjYAHPtY4bkSZetxlJ4fmDa-6jEqKA")
dp = Dispatcher()

OPENWEATHER_API_KEY = "37c1fe288c1a5bb876a736948dc4ce29"  # –í—Å—Ç–∞–≤—å —Å–≤–æ–π –∫–ª—é—á –æ—Ç openweathermap.org


DB_FILE = "db.json"


PLANTS = [
    {"name": "–ü—à–µ–Ω–∏—Ü–∞",   "grow_time": 2*60,   "reward": 50,   "cost": 10},
    {"name": "–ö–∞—Ä—Ç–æ—à–∫–∞",  "grow_time": 5*60,   "reward": 120,  "cost": 25},
    {"name": "–ö–ª—É–±–Ω–∏–∫–∞",  "grow_time": 10*60,  "reward": 300,  "cost": 50},
    {"name": "–ö—É–∫—É—Ä—É–∑–∞",  "grow_time": 20*60,  "reward": 650,  "cost": 120},
    {"name": "–¢—ã–∫–≤–∞",     "grow_time": 30*60,  "reward": 1100, "cost": 220},
    {"name": "–ê—Ä–±—É–∑",     "grow_time": 60*60,  "reward": 2500, "cost": 450},
    {"name": "–í–∏–Ω–æ–≥—Ä–∞–¥",  "grow_time": 45*60,  "reward": 1800, "cost": 330},
    {"name": "–Ø–±–ª–æ–∫–æ",    "grow_time": 90*60,  "reward": 4000, "cost": 750},
    {"name": "–í–∏—à–Ω—è",     "grow_time": 120*60, "reward": 7000, "cost": 1200},
    {"name": "–ú–æ—Ä–∫–æ–≤—å",   "grow_time": 8*60,   "reward": 190,  "cost": 30},
    {"name": "–õ—É–∫",       "grow_time": 12*60,  "reward": 330,  "cost": 55},
    {"name": "–û–≥—É—Ä–µ—Ü",    "grow_time": 15*60,  "reward": 370,  "cost": 70},
    {"name": "–ü–æ–º–∏–¥–æ—Ä",   "grow_time": 18*60,  "reward": 420,  "cost": 95},
    {"name": "–†–∏—Å",       "grow_time": 35*60,  "reward": 1200, "cost": 200},
    {"name": "–°–æ—è",       "grow_time": 25*60,  "reward": 900,  "cost": 170},
]

UPGRADES = {
    "plots": [1, 2, 3, 4, 5, 8, 12],
    "fertilizer": [1.0, 0.8, 0.6, 0.5, 0.35]
}

# –ê–ø–≥—Ä–µ–π–¥—ã: —É—Å–∫–æ—Ä–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞, —É–¥–æ–±—Ä–µ–Ω–∏–µ, –Ω–æ–≤—ã–µ –≥—Ä—è–¥–∫–∏
UPGRADES = {
    "plots": [1, 2, 3, 4, 5],  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—è–¥–æ–∫
    "fertilizer": [1.0, 0.9, 0.8, 0.7, 0.5],  # –º–Ω–æ–∂–∏—Ç–µ–ª—å –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ—Å—Ç–∞
}

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
from aiogram.fsm.state import StatesGroup, State

class ShopStates(StatesGroup):
    buying = State()
class FarmStates(StatesGroup):
    main = State()
    selecting_plot = State()
    choosing_plant = State()
    fertilizing = State()


def load_db():
    try:
        with open(DB_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}

def save_db(db):
    with open(DB_FILE, "w", encoding="utf-8") as f:
        json.dump(db, f, ensure_ascii=False, indent=2)

# ==== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ß–ê–¢–ê–ú ====


def get_user(user_id):
    db = load_db()
    user_id = str(user_id)
    week_now = datetime.now(UTC).isocalendar()[1]
    month_now = datetime.now(UTC).month
    if user_id not in db:
        db[user_id] = {
            "coins": 1000,
            "mana": 100,
            "level": 1,
            "messages": 0,
            "car": "–ù–µ—Ç",
            "business": "–ù–µ—Ç",
            "phone": "–ù–µ—Ç",
            "notebook": "–ù–µ—Ç",
            "last_bonus": 0,
            "job": "–ë–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–π",
            "last_salary": 0,
            "banned": False,
            "ban_reason": "",
            "ban_until": 0,
            "muted": False,
            "mute_until": 0,
            "mute_reason": "",
            "is_moderator": False,
            "week_messages": 0,
            "week_reset": week_now,
            "month_messages": 0,
            "month_reset": month_now,
            "nick": "",
            "username": "",
            "first_name": "",
            "partner": None,
            "is_adult": False,   # <--- –≤–æ—Ç —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞
        }
        save_db(db)

    user = db[user_id]
    # —Å–±—Ä–æ—Å –Ω–µ–¥–µ–ª—å–Ω–æ–π/–º–µ—Å—è—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if user.get("week_reset", week_now) != week_now:
        user["week_messages"] = 0
        user["week_reset"] = week_now
    if user.get("month_reset", month_now) != month_now:
        user["month_messages"] = 0
        user["month_reset"] = month_now
    save_db(db)
    return user

def update_user(user_id, data):
    db = load_db()
    user_id = str(user_id)
    db[user_id].update(data)
    save_db(db)

def get_partner_name(user):
    db = load_db()
    partner_id = user.get("partner")
    if not partner_id:
        return "–ù–µ—Ç"
    partner = db.get(str(partner_id))
    if not partner:
        return "–ù–µ—Ç"
    return partner.get("nick") or ("@" + partner.get("username", str(partner_id)))

def get_top_users(period="all", top_n=10):
    db = load_db()
    users = []
    for k, v in db.items():
        if not k.isdigit():
            continue
        if period == "all":
            users.append((k, v.get("messages", 0)))
        elif period == "week":
            users.append((k, v.get("week_messages", 0)))
        elif period == "month":
            users.append((k, v.get("month_messages", 0)))
    users.sort(key=lambda x: x[1], reverse=True)
    return users[:top_n]

def format_top(users, name="–¢–æ–ø"):
    if not users:
        return f"{name} –ø—É—Å—Ç!"
    db = load_db()
    text = f"üèÜ <b>{name}</b> üèÜ\n\n"
    for i, (user_id, count) in enumerate(users, 1):
        user_obj = db.get(str(user_id), {})
        nick = user_obj.get("nick")
        username = user_obj.get("username")
        first_name = user_obj.get("first_name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
        if nick:
            mention = nick
        elif username:
            mention = f"@{username}"
        else:
            mention = first_name
        text += f"{i}. {mention} ‚Äî <b>{count}</b> —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    return text

def calc_level(messages):
    return messages // 20 + 1

def is_admin(user_id):
    return str(user_id) in ADMINS

def is_moderator(user_id):
    db = load_db()
    return str(user_id) in db.get("moderators", [])

def can_moderate(user_id):
    return is_admin(user_id) or is_moderator(user_id)

def add_moderator(user_id):
    db = load_db()
    moderators = set(map(str, db.get("moderators", [])))
    moderators.add(str(user_id))
    db["moderators"] = list(moderators)
    save_db(db)

def remove_moderator(user_id):
    db = load_db()
    moderators = set(map(str, db.get("moderators", [])))
    moderators.discard(str(user_id))
    db["moderators"] = list(moderators)
    save_db(db)


import time

BANK_PERCENT = 0.10      # 10%
BANK_PERIOD = 3 * 24 * 60 * 60  # 3 –¥–Ω—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

def get_bank(user_id):
    user = get_user(user_id)
    # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–Ω–∫
    if "bank_balance" not in user:
        user["bank_balance"] = 0
        user["bank_updated"] = int(time.time())
        update_user(user_id, user)
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    now = int(time.time())
    last = user.get("bank_updated", 0)
    balance = user.get("bank_balance", 0)
    while now >= last + BANK_PERIOD and balance > 0:
        balance = int(balance * (1 + BANK_PERCENT))
        last += BANK_PERIOD
    if balance != user.get("bank_balance", 0) or last != user.get("bank_updated", 0):
        user["bank_balance"] = balance
        user["bank_updated"] = last
        update_user(user_id, user)
    return balance, last

def deposit(user_id, amount):
    user = get_user(user_id)
    if user["coins"] < amount:
        return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞."
    user["coins"] -= amount
    balance, _ = get_bank(user_id)  # –Ω–∞—á–∏—Å–ª–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø—Ä–µ–∂–¥–µ —á–µ–º –ø–æ–ø–æ–ª–Ω–∏—Ç—å
    user["bank_balance"] = balance + amount
    user["bank_updated"] = int(time.time())
    update_user(user_id, user)
    return True, f"–ù–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á—ë—Ç –ø–æ–ª–æ–∂–µ–Ω–æ {amount} –∫–æ–∏–Ω–æ–≤. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –±–∞–Ω–∫–∞: {user['bank_balance']}."

def withdraw(user_id, amount):
    balance, _ = get_bank(user_id)
    if amount > balance:
        return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –±–∞–Ω–∫–µ."
    user = get_user(user_id)
    user["bank_balance"] = balance - amount
    user["coins"] += amount
    user["bank_updated"] = int(time.time())
    update_user(user_id, user)
    return True, f"–° –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞ —Å–Ω—è—Ç–æ {amount} –∫–æ–∏–Ω–æ–≤. –û—Å—Ç–∞—Ç–æ–∫ –≤ –±–∞–Ω–∫–µ: {user['bank_balance']}."

def create_promo(code, reward_type, value):
    db = load_db()
    if "promo_codes" not in db:
        db["promo_codes"] = {}
    db["promo_codes"][code] = {
        "reward_type": reward_type,
        "reward_value": value,
        "activated_by": []
    }
    save_db(db)

JOBS = [
    {"name": "–î–æ—Å—Ç–∞–≤—â–∏–∫", "min_level": 1, "salary": (25, 50)},
    {"name": "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä", "min_level": 100, "salary": (150, 200)},
    {"name": "–ü—á–µ–ª–æ–≤–æ–¥", "min_level": 500, "salary": (400, 600)},
    {"name": "–¢—Ä–µ–π–¥–µ—Ä", "min_level": 2000, "salary": (1200, 2000)},
    {"name": "–ò–Ω–∂–µ–Ω–µ—Ä", "min_level": 8000, "salary": (4000, 6000)},
    {"name": "–Æ—Ä–∏—Å—Ç", "min_level": 25000, "salary": (10000, 15000)},
    {"name": "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä", "min_level": 60000, "salary": (30000, 45000)},
    {"name": "–ë–∏–∑–Ω–µ—Å–º–µ–Ω", "min_level": 100000, "salary": (80000, 120000)},
]

bot = Bot(token=TOKEN)
dp = Dispatcher()

class WorkStates(StatesGroup):
    choosing_job = State()

class ShopStates(StatesGroup):
    buy_phone = State()
    buy_car = State()
    buy_laptop = State()

from aiogram.fsm.state import State, StatesGroup

class PromoStates(StatesGroup):
    promo_code_step1 = State()
    promo_code_step2 = State()
    promo_code_step3 = State()
    # –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, –µ–≥–æ —Ç–æ–∂–µ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å:
    waiting_for_code = State()

class AdminStates(StatesGroup):
    entering_coins = State()
    entering_mana = State()
    entering_car = State()
    entering_phone = State()
    entering_notebook = State()
    promo_code_step1 = State()
    promo_code_step2 = State()
    promo_code_step3 = State()

# –î–æ–±–∞–≤—å –∫–æ–º–∞–Ω–¥—É "—Ä–∞–±–æ—Ç–∞"
@dp.message(lambda m: m.text and m.text.lower() == "—Ä–∞–±–æ—Ç–∞")
async def job_list(msg: types.Message):
    user = get_user(msg.from_user.id)
    lvl = user.get("level", 1)
    available = [j for j in JOBS if lvl >= j["min_level"]]
    text = "<b>–†–∞–±–æ—Ç–∞</b>\n\n"
    text += f"–¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—Ç–∞: <b>{user.get('job', '–ë–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–π')}</b>\n\n"
    text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏:\n"
    for job in available:
        text += f"- {job['name']} (—Å {job['min_level']} –ª–≤–ª)\n"
    text += "\n–£—Å—Ç—Ä–æ–∏—Ç—å—Å—è: —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è [–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–æ—Ñ–µ—Å—Å–∏–∏]\n–ü—Ä–∏–º–µ—Ä: —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è –∫—É—Ä—å–µ—Ä"
    await msg.answer(text, parse_mode="HTML")

@dp.message(lambda m: m.text and m.text.lower().startswith("—É—Å—Ç—Ä–æ–∏—Ç—å—Å—è "))
async def choose_job(msg: types.Message):
    job_name = msg.text[11:].strip().lower()
    user = get_user(msg.from_user.id)
    lvl = user.get("level", 1)
    found = next((job for job in JOBS if job["name"].lower() == job_name), None)
    if not found:
        await msg.answer("–¢–∞–∫–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –Ω–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É '—Ä–∞–±–æ—Ç–∞'.")
        return
    if lvl < found["min_level"]:
        await msg.answer(f"–≠—Ç–∞ —Ä–∞–±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Å {found['min_level']} —É—Ä–æ–≤–Ω—è.")
        return
    user["job"] = found["name"]
    update_user(msg.from_user.id, user)
    await msg.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—à—å: {found['name']}.")

@dp.message(lambda m: m.text and m.text.lower() == "–∑–∞—Ä–ø–ª–∞—Ç–∞")
async def get_salary(msg: types.Message):
    user = get_user(msg.from_user.id)
    job = next((j for j in JOBS if j["name"] == user.get("job")), None)
    if not job:
        await msg.answer("–¢—ã —Å–µ–π—á–∞—Å –±–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–π. –£—Å—Ç—Ä–æ–π—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É –∫–æ–º–∞–Ω–¥–æ–π: —Ä–∞–±–æ—Ç–∞")
        return
    now = int(time.time())
    cooldown = 15 * 60  # 15 –º–∏–Ω—É—Ç
    last_salary = user.get("last_salary", 0)
    if now < last_salary + cooldown:
        left = last_salary + cooldown - now
        m = left // 60
        s = left % 60
        await msg.answer(f"–ü–æ–ª—É—á–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ {m:02}:{s:02}")
        return
    salary = random.randint(*job["salary"])
    user["coins"] += salary
    user["last_salary"] = now
    update_user(msg.from_user.id, user)
    await msg.answer(f"–¢—ã –ø–æ–ª—É—á–∏–ª –∑–∞—Ä–ø–ª–∞—Ç—É: <b>{salary} –∫–æ–∏–Ω–æ–≤</b> –∑–∞ —Ä–∞–±–æ—Ç—É {job['name']}.", parse_mode="HTML")

@dp.message(lambda m: m.text and m.text.lower() == "–ø—Ä–æ—Ñ–∏–ª—å")
async def profile(msg: Message):
    user_id = msg.from_user.id
    user = get_user(msg.from_user.id)
    user["level"] = calc_level(user.get("messages", 0))
    nik = user.get("nick") or msg.from_user.first_name  
    next_level_msgs = user["level"] * 20 - user["messages"]
    next_level_msgs = max(0, next_level_msgs)
    ban_status = "–î–∞" if user.get("banned") else "–ù–µ—Ç"
    ban_reason = user.get("ban_reason", "")
    ban_until = user.get("ban_until", 0)
    if ban_until and ban_until > time.time():
        ban_time_left = int(ban_until - time.time())
        ban_str = f"–î–∞ (–µ—â—ë {ban_time_left//60} –º–∏–Ω, –ø—Ä–∏—á–∏–Ω–∞: {ban_reason})"
    elif user.get("banned"):
        ban_str = f"–î–∞ (–Ω–∞–≤—Å–µ–≥–¥–∞, –ø—Ä–∏—á–∏–Ω–∞: {ban_reason})"
    else:
        ban_str = "–ù–µ—Ç"
    mute_status = "–î–∞" if user.get("muted") and user.get("mute_until",0)>time.time() else "–ù–µ—Ç"
    if user.get("muted") and user.get("mute_until",0)>time.time():
        mute_left = int(user["mute_until"] - time.time())
        mute_str = f"–î–∞ (–µ—â—ë {mute_left//60} –º–∏–Ω, –ø—Ä–∏—á–∏–Ω–∞: {user.get('mute_reason','')})"
    else:
        mute_str = "–ù–µ—Ç"
    mod_status = "–î–∞" if is_moderator(msg.from_user.id) else "–ù–µ—Ç"
    text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n"
        f"–ù–∏–∫: <b>{nik}</b>\n"
        f"ID: <code>{user_id}</code>\n"
        f"–ü–∞—Ä–∞–¥–∏–∑–∫–æ–∏–Ω—ã: <b>{user['coins']}</b>\n"
        f"–ü–∞—Ä–∞–¥–∏–∑ –º–∞–Ω–∞: <b>{user['mana']}</b>\n"
        f"–£—Ä–æ–≤–µ–Ω—å: <b>{user['level']}</b>\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–π: <b>{user.get('messages',0)}</b>\n"
        f"–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ª–≤–ª–∞: <b>{next_level_msgs}</b>\n"
        f"üöó –ú–∞—à–∏–Ω–∞: <b>{user['car']}</b>\n"
        f"üè¢ –ë–∏–∑–Ω–µ—Å: <b>{user['business']}</b>\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: <b>{user['phone']}</b>\n"
        f"üíª –ù–æ—É—Ç–±—É–∫: <b>{user['notebook']}</b>\n"
        f"üíº –†–∞–±–æ—Ç–∞: <b>{user.get('job','–ë–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–π')}</b>\n"
        f"üíç –ü–∞—Ä—Ç–Ω—ë—Ä: <b>{get_partner_name(user)}</b>\n"
        f"ü§ê –ú—É—Ç: <b>{mute_str}</b>\n"
        f"üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: <b>{mod_status}</b>"
    )
    await msg.answer(text, parse_mode=ParseMode.HTML)
@dp.message(lambda m: m.text and m.text.lower() == "—Ñ–µ—Ä–º–∞")
async def farm_menu(msg: types.Message):
    print("farm_menu called")
    await msg.answer("üåæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ñ–µ—Ä–º—É!")
    user = get_user(msg.from_user.id)
    plots = user.get("farm_plots", 1)
    fert = user.get("fertilizer_lvl", 0)
    text = (
        "<b>üåæ –¢–≤–æ—è —Ñ–µ—Ä–º–∞</b>\n"
        f"–ì—Ä—è–¥–æ–∫: <b>{plots}</b>\n"
        f"–£—Ä–æ–≤–µ–Ω—å —É–¥–æ–±—Ä–µ–Ω–∏–π: <b>{fert}</b>\n"
        f"–ë–∞–ª–∞–Ω—Å: <b>{user.get('coins', 0)}</b> –∫–æ–∏–Ω–æ–≤\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "–≥—Ä—è–¥–∫–∏ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n"
        "–ø–æ—Å–∞–¥–∏—Ç—å [–Ω–æ–º–µ—Ä] [–∫—É–ª—å—Ç—É—Ä–∞]\n"
        "—Å–æ–±—Ä–∞—Ç—å ‚Äî —Å–æ–±—Ä–∞—Ç—å —É—Ä–æ–∂–∞–π\n"
        "—É–¥–æ–±—Ä–∏—Ç—å [–Ω–æ–º–µ—Ä] ‚Äî —É—Å–∫–æ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–æ—Å—Ç\n"
        "—Å—Ä–µ–∑–∞—Ç—å [–Ω–æ–º–µ—Ä] ‚Äî —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ\n"
        "–∞–ø–≥—Ä–µ–π–¥—ã ‚Äî —É–ª—É—á—à–µ–Ω–∏—è\n"
        "–∫—É–ø–∏—Ç—å –≥—Ä—è–¥–∫—É\n"
        "–∫—É–ø–∏—Ç—å —É–¥–æ–±—Ä–µ–Ω–∏–µ\n"
        "–±–∞–ª–∞–Ω—Å –∏–ª–∏ –± ‚Äî –±–∞–ª–∞–Ω—Å\n"
    )
    await msg.answer(text, parse_mode="HTML")

@dp.message(lambda m: m.text and m.text.lower() in ["–±–∞–ª–∞–Ω—Å", "–±"])
async def show_balance(msg: types.Message):
    user = get_user(msg.from_user.id)
    await msg.answer(
        f"üí∞ –ë–∞–ª–∞–Ω—Å:\n–ü–∞—Ä–∞–¥–∏–∑–∫–æ–∏–Ω—ã: <b>{user['coins']}</b>\n–ü–∞—Ä–∞–¥–∏–∑ –º–∞–Ω–∞: <b>{user['mana']}</b>",
        parse_mode="HTML"
    )

import random


@dp.message(lambda m: m.text and m.text.lower().startswith("+–Ω–∏–∫ "))
async def set_nick(msg: types.Message):
    nick = msg.text[5:].strip()
    if not (1 <= len(nick) <= 32):
        await msg.answer("–ù–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏ –º–∞—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    user = get_user(msg.from_user.id)
    user["nick"] = nick
    update_user(msg.from_user.id, user)
    await msg.answer(f"–¢–≤–æ–π –Ω–∏–∫ —Ç–µ–ø–µ—Ä—å: <b>{nick}</b>", parse_mode="HTML")


@dp.message(lambda m: m.text and m.text.lower().startswith("–∫–∞–∑–∏–Ω–æ"))
async def casino(msg: types.Message):
    parts = msg.text.strip().split()
    if len(parts) < 2 or not parts[1].isdigit():
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: –∫–∞–∑–∏–Ω–æ [—Å—Ç–∞–≤–∫–∞], –Ω–∞–ø—Ä–∏–º–µ—Ä: –∫–∞–∑–∏–Ω–æ 100")
        return
    bet = int(parts[1])
    if bet <= 0:
        await msg.answer("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return
    user = get_user(msg.from_user.id)
    if user["coins"] < bet:
        await msg.answer("–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")
        return

    outcome = random.choice(["lose", "win"])
    if outcome == "lose":
        user["coins"] -= bet
        update_user(msg.from_user.id, user)
        await msg.answer(f"üé∞ –£–≤—ã, —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª {bet} –∫–æ–∏–Ω–æ–≤.\n–ë–∞–ª–∞–Ω—Å: {user['coins']}")
    else:
        multiplier = random.choice([2, 1.5])
        win = int(bet * multiplier)
        user["coins"] += win
        update_user(msg.from_user.id, user)
        await msg.answer(f"üé∞ –¢—ã –≤—ã–∏–≥—Ä–∞–ª {win} –∫–æ–∏–Ω–æ–≤! ({multiplier}x)\n–ë–∞–ª–∞–Ω—Å: {user['coins']}")

@dp.message(lambda m: m.text and m.text.lower() == "–≥—Ä—è–¥–∫–∏")
async def farm_state(msg: types.Message):
    user = get_user(msg.from_user.id)
    plots = user.get("farm_plots", 1)
    farm = user.get("farm", [None] * plots)
    text = "<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –≥—Ä—è–¥–æ–∫:</b>\n"
    for i in range(plots):
        plot = farm[i] if i < len(farm) else None
        if not plot:
            text += f"{i+1}: –ø—É—Å—Ç–æ\n"
        else:
            ready = plot["start"] + plot["grow_time"]
            left = max(0, ready - int(time.time()))
            m, s = left // 60, left % 60
            text += f"{i+1}: {plot['plant']} ‚Äî {m:02}:{s:02} –¥–æ —É—Ä–æ–∂–∞—è\n"
    await msg.answer(text, parse_mode="HTML")

@dp.message(lambda m: m.text and m.text.lower().startswith("–ø–æ—Å–∞–¥–∏—Ç—å "))
async def farm_plant(msg: types.Message):
    parts = msg.text.strip().split(maxsplit=2)
    if len(parts) < 3 or not parts[1].isdigit():
        await msg.answer("–§–æ—Ä–º–∞—Ç: –ø–æ—Å–∞–¥–∏—Ç—å [–Ω–æ–º–µ—Ä_–≥—Ä—è–¥–∫–∏] [–∫—É–ª—å—Ç—É—Ä–∞]")
        return
    plot_idx = int(parts[1]) - 1
    plant_name = parts[2].capitalize()
    plant = next((p for p in PLANTS if p["name"].lower() == plant_name.lower()), None)
    if not plant:
        await msg.answer("–ù–µ—Ç —Ç–∞–∫–æ–π –∫—É–ª—å—Ç—É—Ä—ã. –ü—Ä–æ–≤–µ—Ä—å —Å–ø–∏—Å–æ–∫!")
        return
    user = get_user(msg.from_user.id)
    if user.get("coins", 0) < plant["cost"]:
        await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤.")
        return
    plots = user.get("farm_plots", 1)
    if not (0 <= plot_idx < plots):
        await msg.answer("–ù–µ—Ç —Ç–∞–∫–æ–π –≥—Ä—è–¥–∫–∏.")
        return
    farm = user.get("farm", [None] * plots)
    if farm[plot_idx]:
        await msg.answer("–ì—Ä—è–¥–∫–∞ –∑–∞–Ω—è—Ç–∞!")
        return
    fert = user.get("fertilizer_lvl", 0)
    time_mul = UPGRADES["fertilizer"][fert] if fert < len(UPGRADES["fertilizer"]) else 1.0
    grow_time = int(plant["grow_time"] * time_mul)
    farm[plot_idx] = {
        "plant": plant["name"],
        "start": int(time.time()),
        "grow_time": grow_time,
        "reward": plant["reward"],
        "fertilized": False
    }
    user["coins"] -= plant["cost"]
    user["farm"] = farm
    update_user(msg.from_user.id, user)
    await msg.answer(f"{plant['name']} –ø–æ—Å–∞–∂–µ–Ω–∞ –Ω–∞ –≥—Ä—è–¥–∫–µ {plot_idx+1}. –£—Ä–æ–∂–∞–π —á–µ—Ä–µ–∑ {grow_time//60} –º–∏–Ω.")

@dp.message(lambda m: m.text and m.text.lower() == "—Å–æ–±—Ä–∞—Ç—å")
async def farm_harvest(msg: types.Message):
    user = get_user(msg.from_user.id)
    plots = user.get("farm_plots", 1)
    farm = user.get("farm", [None] * plots)
    any_harvest = False
    for i in range(plots):
        plot = farm[i] if i < len(farm) else None
        if plot and int(time.time()) >= plot["start"] + plot["grow_time"]:
            user["coins"] += plot["reward"]
            farm[i] = None
            any_harvest = True
            await msg.answer(f"–° –≥—Ä—è–¥–∫–∏ {i+1} —Å–æ–±—Ä–∞–Ω —É—Ä–æ–∂–∞–π {plot['plant']}! +{plot['reward']} –∫–æ–∏–Ω–æ–≤.")
    user["farm"] = farm
    update_user(msg.from_user.id, user)
    if not any_harvest:
        await msg.answer("–ù–µ—Ç –≥–æ—Ç–æ–≤–æ–≥–æ —É—Ä–æ–∂–∞—è. –ü—Ä–æ–≤–µ—Ä—å '–≥—Ä—è–¥–∫–∏'.")

@dp.message(lambda m: m.text and m.text.lower().startswith("—É–¥–æ–±—Ä–∏—Ç—å "))
async def fertilize_plot(msg: types.Message):
    parts = msg.text.strip().split()
    if len(parts) < 2 or not parts[1].isdigit():
        await msg.answer("–§–æ—Ä–º–∞—Ç: —É–¥–æ–±—Ä–∏—Ç—å [–Ω–æ–º–µ—Ä_–≥—Ä—è–¥–∫–∏]")
        return
    plot_idx = int(parts[1]) - 1
    user = get_user(msg.from_user.id)
    plots = user.get("farm_plots", 1)
    farm = user.get("farm", [None] * plots)
    if not (0 <= plot_idx < plots):
        await msg.answer("–ù–µ—Ç —Ç–∞–∫–æ–π –≥—Ä—è–¥–∫–∏.")
        return
    plot = farm[plot_idx]
    if not plot:
        await msg.answer("–ì—Ä—è–¥–∫–∞ –ø—É—Å—Ç–∞—è!")
        return
    if plot.get("fertilized"):
        await msg.answer("–≠—Ç–∞ –≥—Ä—è–¥–∫–∞ —É–∂–µ —É–¥–æ–±—Ä–µ–Ω–∞!")
        return
    if user["coins"] < 100:
        await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤ –¥–ª—è —É–¥–æ–±—Ä–µ–Ω–∏—è (–Ω—É–∂–Ω–æ 100).")
        return
    plot["grow_time"] = max(1, plot["grow_time"] // 2)
    plot["fertilized"] = True
    user["coins"] -= 100
    farm[plot_idx] = plot
    user["farm"] = farm
    update_user(msg.from_user.id, user)
    await msg.answer(f"–ì—Ä—è–¥–∫–∞ {plot_idx+1} —É–¥–æ–±—Ä–µ–Ω–∞! –£—Ä–æ–∂–∞–π —Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ {plot['grow_time']//60} –º–∏–Ω.")

@dp.message(lambda m: m.text and m.text.lower().startswith("—Å—Ä–µ–∑–∞—Ç—å "))
async def remove_plant(msg: types.Message):
    parts = msg.text.strip().split()
    if len(parts) < 2 or not parts[1].isdigit():
        await msg.answer("–§–æ—Ä–º–∞—Ç: —Å—Ä–µ–∑–∞—Ç—å [–Ω–æ–º–µ—Ä_–≥—Ä—è–¥–∫–∏]")
        return
    plot_idx = int(parts[1]) - 1
    user = get_user(msg.from_user.id)
    plots = user.get("farm_plots", 1)
    farm = user.get("farm", [None] * plots)
    if not (0 <= plot_idx < plots):
        await msg.answer("–ù–µ—Ç —Ç–∞–∫–æ–π –≥—Ä—è–¥–∫–∏.")
        return
    if not farm[plot_idx]:
        await msg.answer("–ì—Ä—è–¥–∫–∞ –∏ —Ç–∞–∫ –ø—É—Å—Ç–∞!")
        return
    farm[plot_idx] = None
    user["farm"] = farm
    update_user(msg.from_user.id, user)
    await msg.answer(f"–ì—Ä—è–¥–∫–∞ {plot_idx+1} —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç–∞.")

@dp.message(lambda m: m.text and m.text.lower() == "–∞–ø–≥—Ä–µ–π–¥—ã")
async def farm_upgrades(msg: types.Message):
    user = get_user(msg.from_user.id)
    plots = user.get("farm_plots", 1)
    fert = user.get("fertilizer_lvl", 0)
    upgrades = []
    if plots < max(UPGRADES["plots"]):
        price = 200 * (plots+1)
        upgrades.append(f"–£–≤–µ–ª–∏—á–∏—Ç—å –≥—Ä—è–¥–æ–∫ –¥–æ {plots+1}: {price} –∫–æ–∏–Ω–æ–≤. –ö–æ–º–∞–Ω–¥–∞: –∫—É–ø–∏—Ç—å –≥—Ä—è–¥–∫—É")
    if fert < len(UPGRADES["fertilizer"]) - 1:
        price = 150 * (fert+1)
        upgrades.append(f"–ü—Ä–æ–∫–∞—á–∞—Ç—å —É–¥–æ–±—Ä–µ–Ω–∏–µ –¥–æ {fert+1}: {price} –∫–æ–∏–Ω–æ–≤. –ö–æ–º–∞–Ω–¥–∞: –∫—É–ø–∏—Ç—å —É–¥–æ–±—Ä–µ–Ω–∏–µ")
    if not upgrades:
        upgrades.append("–í—Å–µ –∞–ø–≥—Ä–µ–π–¥—ã –∫—É–ø–ª–µ–Ω—ã!")
    await msg.answer("\n".join(upgrades))

@dp.message(lambda m: m.text and m.text.lower() == "–∫—É–ø–∏—Ç—å –≥—Ä—è–¥–∫—É")
async def buy_plot(msg: types.Message):
    user = get_user(msg.from_user.id)
    plots = user.get("farm_plots", 1)
    if plots >= max(UPGRADES["plots"]):
        await msg.answer("–ú–∞–∫—Å–∏–º—É–º –≥—Ä—è–¥–æ–∫!")
        return
    price = 200 * (plots+1)
    if user["coins"] < price:
        await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤!")
        return
    user["coins"] -= price
    user["farm_plots"] = plots+1
    farm = user.get("farm", [None]*plots)
    farm.extend([None]*(user["farm_plots"]-len(farm)))
    user["farm"] = farm
    update_user(msg.from_user.id, user)
    await msg.answer(f"–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {plots+1} –≥—Ä—è–¥–æ–∫!")

@dp.message(lambda m: m.text and m.text.lower() == "–∫—É–ø–∏—Ç—å —É–¥–æ–±—Ä–µ–Ω–∏–µ")
async def buy_fertilizer(msg: types.Message):
    user = get_user(msg.from_user.id)
    fert = user.get("fertilizer_lvl", 0)
    if fert >= len(UPGRADES["fertilizer"])-1:
        await msg.answer("–ú–∞–∫—Å–∏–º—É–º —É–¥–æ–±—Ä–µ–Ω–∏—è!")
        return
    price = 150 * (fert+1)
    if user["coins"] < price:
        await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤!")
        return
    user["coins"] -= price
    user["fertilizer_lvl"] = fert+1
    update_user(msg.from_user.id, user)
    await msg.answer(f"–£—Ä–æ–≤–µ–Ω—å —É–¥–æ–±—Ä–µ–Ω–∏–π —Ç–µ–ø–µ—Ä—å {fert+1}! –†–∞—Å—Ç–µ–Ω–∏—è —Ä–∞—Å—Ç—É—Ç –±—ã—Å—Ç—Ä–µ–µ.")


import random
from aiogram import types

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
ROULETTE = {}
ROULETTE_TIMEOUT = 120  # —Å–µ–∫—É–Ω–¥ –Ω–∞ —Å–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤
ROULETTE_LIMIT_HOUR = 3  # –ª–∏–º–∏—Ç –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ä—É–ª–µ—Ç–∫–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Å
LAST_ROULETTE_PLAY = {}  # user_id: [timestamps]

def can_play_roulette(user_id):
    now = int(time.time())
    times = LAST_ROULETTE_PLAY.get(user_id, [])
    times = [t for t in times if now - t < 3600]
    LAST_ROULETTE_PLAY[user_id] = times
    return len(times) < ROULETTE_LIMIT_HOUR

def mark_play_roulette(user_id):
    now = int(time.time())
    LAST_ROULETTE_PLAY.setdefault(user_id, []).append(now)

@dp.message(lambda m: m.text and m.text.lower().startswith("—Ä—É–ª–µ—Ç–∫–∞ "))
async def start_roulette(msg: types.Message):
    global ROULETTE
    if ROULETTE.get("started"):
        await msg.answer("–°–µ–π—á–∞—Å —É–∂–µ –∏–¥—ë—Ç –∏–≥—Ä–∞! –ñ–¥–∏—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ—ë.")
        return
    parts = msg.text.strip().split()
    if len(parts) < 2 or not parts[1].isdigit():
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: —Ä—É–ª–µ—Ç–∫–∞ [—Å—Ç–∞–≤–∫–∞], –Ω–∞–ø—Ä–∏–º–µ—Ä: —Ä—É–ª–µ—Ç–∫–∞ 300")
        return
    bet = int(parts[1])
    if bet < 1:
        await msg.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî 1.")
        return
    user = get_user(msg.from_user.id)
    if not can_play_roulette(msg.from_user.id):
        await msg.answer(f"–õ–∏–º–∏—Ç: –Ω–µ –±–æ–ª—å—à–µ {ROULETTE_LIMIT_HOUR} –∏–≥—Ä –≤ —á–∞—Å.")
        return
    if user["coins"] < bet:
        await msg.answer("–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤ –¥–ª—è —Ç–∞–∫–æ–π —Å—Ç–∞–≤–∫–∏.")
        return
    ROULETTE = {
        "started": True,
        "bet": bet,
        "creator_id": msg.from_user.id,
        "players": {msg.from_user.id: msg.from_user.full_name},
        "nicknames": {msg.from_user.id: user.get("nick") or msg.from_user.full_name},
        "time_start": int(time.time())
    }
    await msg.answer(
        f"üé≤ –†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞!\n"
        f"–°—Ç–∞–≤–∫–∞: <b>{bet}</b> –∫–æ–∏–Ω–æ–≤\n"
        f"–ú–∏–Ω–∏–º—É–º 3, –º–∞–∫—Å–∏–º—É–º 10 –∏–≥—Ä–æ–∫–æ–≤.\n"
        f"–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è ‚Äî –Ω–∞–ø–∏—à–∏ <b>+</b>.\n"
        f"–°–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å —Ä–∞–Ω—å—à–µ –∫–æ–º–∞–Ω–¥–æ–π <b>—Å—Ç–∞—Ä—Ç</b> (–µ—Å–ª–∏ 3+ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤).\n"
        f"–î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî <b>–æ—Ç–º–µ–Ω–∞</b> (–º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å).\n"
        f"–í—Ä–µ–º—è –Ω–∞ –Ω–∞–±–æ—Ä: {ROULETTE_TIMEOUT//60} –º–∏–Ω—É—Ç.",
        parse_mode="HTML"
    )

@dp.message(lambda m: m.text and m.text.strip() == "+")
async def join_roulette(msg: types.Message):
    global ROULETTE
    if not ROULETTE.get("started"):
        return
    if int(time.time()) - ROULETTE["time_start"] > ROULETTE_TIMEOUT:
        await msg.answer("–í—Ä–µ–º—è –Ω–∞–±–æ—Ä–∞ –≤—ã—à–ª–æ, —Ä—É–ª–µ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        ROULETTE.clear()
        return
    if len(ROULETTE["players"]) >= 10:
        await msg.answer("–í –∏–≥—Ä–µ —É–∂–µ –º–∞–∫—Å–∏–º—É–º 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!")
        return
    if msg.from_user.id in ROULETTE["players"]:
        await msg.answer("–¢—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —ç—Ç–æ–π —Ä—É–ª–µ—Ç–∫–µ!")
        return
    if not can_play_roulette(msg.from_user.id):
        await msg.answer(f"–õ–∏–º–∏—Ç: –Ω–µ –±–æ–ª—å—à–µ {ROULETTE_LIMIT_HOUR} –∏–≥—Ä –≤ —á–∞—Å.")
        return
    user = get_user(msg.from_user.id)
    if user["coins"] < ROULETTE["bet"]:
        await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è.")
        return
    ROULETTE["players"][msg.from_user.id] = msg.from_user.full_name
    ROULETTE["nicknames"][msg.from_user.id] = user.get("nick") or msg.from_user.full_name
    await msg.answer(f"{ROULETTE['nicknames'][msg.from_user.id]} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Ä—É–ª–µ—Ç–∫–µ! ({len(ROULETTE['players'])}/10)")

@dp.message(lambda m: m.text and m.text.lower() == "—Å—Ç–∞—Ä—Ç")
async def run_roulette(msg: types.Message):
    global ROULETTE
    if not ROULETTE.get("started"):
        return
    if msg.from_user.id != ROULETTE["creator_id"]:
        await msg.answer("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Ä—É–ª–µ—Ç–∫–∏ –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π '—Å—Ç–∞—Ä—Ç'.")
        return
    if int(time.time()) - ROULETTE["time_start"] > ROULETTE_TIMEOUT:
        await msg.answer("–í—Ä–µ–º—è –Ω–∞–±–æ—Ä–∞ –≤—ã—à–ª–æ, —Ä—É–ª–µ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        ROULETTE.clear()
        return
    if len(ROULETTE["players"]) < 3:
        await msg.answer("–î–ª—è —Å—Ç–∞—Ä—Ç–∞ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
        return
    players = list(ROULETTE["players"].keys())
    nicks = ROULETTE["nicknames"]
    bet = ROULETTE["bet"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
    for uid in players[:]:
        user = get_user(uid)
        if user["coins"] < bet:
            await msg.answer(f"{nicks[uid]} –≤—ã–±—ã–ª: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–æ–∏–Ω–æ–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏!")
            players.remove(uid)
    if len(players) < 3:
        await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ —Å –¥–µ–Ω—å–≥–∞–º–∏ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ (3+).")
        ROULETTE.clear()
        return
    # –°–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É –∏ –æ—Ç–º–µ—á–∞–µ–º –ª–∏–º–∏—Ç
    for uid in players:
        user = get_user(uid)
        user["coins"] -= bet
        update_user(uid, user)
        mark_play_roulette(uid)

    round_num = 1
    while len(players) > 1:
        await msg.answer(
            f"–†–∞—É–Ω–¥ {round_num}: –æ—Å—Ç–∞–ª–æ—Å—å –∏–≥—Ä–æ–∫–æ–≤ ‚Äî {len(players)}."
        )
        # –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç
        for sec in range(5, 0, -1):
            await msg.answer(str(sec))
            await asyncio.sleep(1)
        await msg.answer("–ë–ê–ú!")
        loser = random.choice(players)
        loser_name = nicks[loser]
        players.remove(loser)
        await msg.answer(f"üî´ {loser_name} –≤—ã–±—ã–≤–∞–µ—Ç –∏–∑ –∏–≥—Ä—ã!")
        round_num += 1

    winner = players[0]
    pot = bet * len(nicks)
    user = get_user(winner)
    user["coins"] += pot
    update_user(winner, user)
    await msg.answer(
        f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å ‚Äî {nicks[winner]}! –ó–∞–±–∏—Ä–∞–µ—Ç –±–∞–Ω–∫: <b>{pot}</b> –∫–æ–∏–Ω–æ–≤.",
        parse_mode="HTML"
    )
    ROULETTE.clear()

@dp.message(lambda m: m.text and m.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_roulette(msg: types.Message):
    global ROULETTE
    if not ROULETTE.get("started"):
        return
    if msg.from_user.id != ROULETTE["creator_id"]:
        await msg.answer("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Ä—É–ª–µ—Ç–∫–∏ –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É.")
        return
    await msg.answer("–†—É–ª–µ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º.")
    ROULETTE.clear()

@dp.message(lambda m: m.text and m.text.lower() == "–±–æ–Ω—É—Å")
async def daily_bonus(msg: Message):
    user = get_user(msg.from_user.id)
    now = int(time.time())
    next_bonus_time = user.get("last_bonus", 0) + 5*60*60
    if now < next_bonus_time:
        left = next_bonus_time - now
        h = left // 3600
        m = (left % 3600) // 60
        s = left % 60
        await msg.answer(f"–ë–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {h:02}:{m:02}:{s:02}")
        return
    bonus = random.randint(200, 500)
    user["coins"] += bonus
    user["last_bonus"] = now
    update_user(msg.from_user.id, user)
    await msg.answer(f"üéÅ –¢—ã –ø–æ–ª—É—á–∏–ª <b>{bonus} –ü–∞—Ä–∞–¥–∏–∑–∫–æ–∏–Ω–æ–≤</b>!", parse_mode=ParseMode.HTML)


router = Router()

class PromoStates(StatesGroup):
    waiting_for_code = State()

PROMOCODES = {"test2024": 100}

@router.message(lambda m: m.text and m.text.lower() == "–ø—Ä–æ–º–æ–∫–æ–¥")
async def promo_enter(msg: Message, state: FSMContext):
    await state.set_state(PromoStates.waiting_for_code)
    await msg.answer("–í–≤–µ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥:")

@router.message(PromoStates.waiting_for_code)
async def promo_code_process(msg: Message, state: FSMContext):
    promo_code = msg.text.strip().lower()
    if promo_code in PROMOCODES:
        await msg.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! +{PROMOCODES[promo_code]} –∫–æ–∏–Ω–æ–≤")
        await state.clear()
    else:
        await msg.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")


    # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å
    bonus = PROMOCODES[promo_code]
    user["coins"] += bonus
    user.setdefault("activated_promos", []).append(promo_code)
    update_user(user_id, user)

    await msg.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {bonus} –∫–æ–∏–Ω–æ–≤.")
    await state.clear()
    
@dp.message(lambda m: m.text and m.text.lower() == "–∞–¥–º–∏–Ω")
async def admin_panel_entry(msg: Message):
    if not is_admin(msg.from_user.id):
        await msg.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await msg.answer(
        "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n"
        "–≤—ã–¥–∞—Ç—å –∫–æ–∏–Ω—ã ‚Äî –≤—ã–¥–∞—Ç—å –∫–æ–∏–Ω—ã\n"
        "–≤—ã–¥–∞—Ç—å –º–∞–Ω—É ‚Äî –≤—ã–¥–∞—Ç—å –º–∞–Ω—É\n"
        "–≤—ã–¥–∞—Ç—å –º–∞—à–∏–Ω—É ‚Äî –≤—ã–¥–∞—Ç—å –º–∞—à–∏–Ω—É\n"
        "–≤—ã–¥–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω ‚Äî –≤—ã–¥–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω\n"
        "–≤—ã–¥–∞—Ç—å –Ω–æ—É—Ç–±—É–∫ ‚Äî –≤—ã–¥–∞—Ç—å –Ω–æ—É—Ç–±—É–∫\n"
        "—Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ ‚Äî —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n"
        "–∫–∏–∫ ‚Äî –∫–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )

@dp.message(lambda m: m.text and m.text.lower() == "–ø–∞—Ä–∞–¥–∏–∑")
async def paradiz_menu(msg: Message):
    await msg.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü–∞—Ä–∞–¥–∏–∑! –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "–º–∞–≥–∞–∑–∏–Ω ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω\n"
        "–ø—Ä–æ—Ñ–∏–ª—å ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "–ø—Ä–æ–º–æ–∫–æ–¥ ‚Äî –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n"
        "–±–æ–Ω—É—Å ‚Äî –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å\n"
        "–∞–¥–º–∏–Ω ‚Äî –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"
    )
    get_user(msg.from_user.id)

@dp.message(lambda m: m.text and m.text.lower() == "—É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏")
async def remove_inline_markup(msg: types.Message):
    try:
        await msg.bot.edit_message_reply_markup(
            chat_id=msg.chat.id,
            message_id=msg.message_id - 1,
            reply_markup=None
        )
        await msg.answer("–ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω—ã —É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    except Exception as e:
        await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏. –í–æ–∑–º–æ–∂–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ –∏–ª–∏ –∫–Ω–æ–ø–æ–∫ –Ω–µ—Ç.")

phones = [
        {"name": "Nokia 105", "price": 500, "colors": ["–ß–µ—Ä–Ω—ã–π", "–°–∏–Ω–∏–π", "–ö—Ä–∞—Å–Ω—ã–π", "–ó–µ–ª–µ–Ω—ã–π", "–ë–µ–ª—ã–π"]},
        {"name": "Samsung Galaxy A10", "price": 3000, "colors": ["–ß–µ—Ä–Ω—ã–π", "–°–∏–Ω–∏–π", "–ö—Ä–∞—Å–Ω—ã–π", "–ó–µ–ª–µ–Ω—ã–π", "–ë–µ–ª—ã–π"]},
        {"name": "Xiaomi Redmi 9A", "price": 5500, "colors": ["–ß–µ—Ä–Ω—ã–π", "–°–∏–Ω–∏–π", "–ö—Ä–∞—Å–Ω—ã–π", "–ó–µ–ª–µ–Ω—ã–π", "–ë–µ–ª—ã–π"]},
        {"name": "Realme C21", "price": 8000, "colors": ["–ß–µ—Ä–Ω—ã–π", "–°–∏–Ω–∏–π", "–ö—Ä–∞—Å–Ω—ã–π", "–ó–µ–ª–µ–Ω—ã–π", "–ë–µ–ª—ã–π"]},
        {"name": "Huawei P30", "price": 12000, "colors": ["–ß–µ—Ä–Ω—ã–π", "–°–∏–Ω–∏–π", "–ö—Ä–∞—Å–Ω—ã–π", "–ó–µ–ª–µ–Ω—ã–π", "–ë–µ–ª—ã–π"]},
        {"name": "iPhone SE", "price": 25000, "colors": ["–ß–µ—Ä–Ω—ã–π", "–°–∏–Ω–∏–π", "–ö—Ä–∞—Å–Ω—ã–π", "–ó–µ–ª–µ–Ω—ã–π", "–ë–µ–ª—ã–π"]},
        {"name": "Poco X5 Pro", "price": 38000, "colors": ["–ß–µ—Ä–Ω—ã–π", "–°–∏–Ω–∏–π", "–ö—Ä–∞—Å–Ω—ã–π", "–ó–µ–ª–µ–Ω—ã–π", "–ë–µ–ª—ã–π"]},
        {"name": "Samsung Galaxy S21", "price": 45000, "colors": ["–ß–µ—Ä–Ω—ã–π", "–°–∏–Ω–∏–π", "–ö—Ä–∞—Å–Ω—ã–π", "–ó–µ–ª–µ–Ω—ã–π", "–ë–µ–ª—ã–π"]},
        {"name": "iPhone 13", "price": 70000, "colors": ["–ß–µ—Ä–Ω—ã–π", "–°–∏–Ω–∏–π", "–ö—Ä–∞—Å–Ω—ã–π", "–ó–µ–ª–µ–Ω—ã–π", "–ë–µ–ª—ã–π"]},
        {"name": "iPhone 15 Pro Max", "price": 180000, "colors": ["–ß–µ—Ä–Ω—ã–π", "–°–∏–Ω–∏–π", "–ö—Ä–∞—Å–Ω—ã–π", "–ó–µ–ª–µ–Ω—ã–π", "–ë–µ–ª—ã–π"]}
]
cars = [
        {"name": "Lada Granta", "price": 20000, "colors": ["–ß–µ—Ä–Ω—ã–π", "–ë–µ–ª—ã–π", "–ö—Ä–∞—Å–Ω—ã–π", "–°–∏–Ω–∏–π", "–ó–µ–ª–µ–Ω—ã–π"]},
        {"name": "Volkswagen Polo", "price": 400000, "colors": ["–ß–µ—Ä–Ω—ã–π", "–ë–µ–ª—ã–π", "–ö—Ä–∞—Å–Ω—ã–π", "–°–∏–Ω–∏–π", "–ó–µ–ª–µ–Ω—ã–π"]},
        {"name": "Kia Rio", "price": 600000, "colors": ["–ß–µ—Ä–Ω—ã–π", "–ë–µ–ª—ã–π", "–ö—Ä–∞—Å–Ω—ã–π", "–°–∏–Ω–∏–π", "–ó–µ–ª–µ–Ω—ã–π"]},
        {"name": "Hyundai Solaris", "price": 750000, "colors": ["–ß–µ—Ä–Ω—ã–π", "–ë–µ–ª—ã–π", "–ö—Ä–∞—Å–Ω—ã–π", "–°–∏–Ω–∏–π", "–ó–µ–ª–µ–Ω—ã–π"]},
        {"name": "Toyota Camry", "price": 1200000, "colors": ["–ß–µ—Ä–Ω—ã–π", "–ë–µ–ª—ã–π", "–ö—Ä–∞—Å–Ω—ã–π", "–°–∏–Ω–∏–π", "–ó–µ–ª–µ–Ω—ã–π"]},
        {"name": "Mazda 6", "price": 1500000, "colors": ["–ß–µ—Ä–Ω—ã–π", "–ë–µ–ª—ã–π", "–ö—Ä–∞—Å–Ω—ã–π", "–°–∏–Ω–∏–π", "–ó–µ–ª–µ–Ω—ã–π"]},
        {"name": "BMW 3 Series", "price": 2300000, "colors": ["–ß–µ—Ä–Ω—ã–π", "–ë–µ–ª—ã–π", "–ö—Ä–∞—Å–Ω—ã–π", "–°–∏–Ω–∏–π", "–ó–µ–ª–µ–Ω—ã–π"]},
        {"name": "Mercedes-Benz C-Class", "price": 2700000, "colors": ["–ß–µ—Ä–Ω—ã–π", "–ë–µ–ª—ã–π", "–ö—Ä–∞—Å–Ω—ã–π", "–°–∏–Ω–∏–π", "–ó–µ–ª–µ–Ω—ã–π"]},
        {"name": "Tesla Model S", "price": 3200000, "colors": ["–ß–µ—Ä–Ω—ã–π", "–ë–µ–ª—ã–π", "–ö—Ä–∞—Å–Ω—ã–π", "–°–∏–Ω–∏–π", "–ó–µ–ª–µ–Ω—ã–π"]},
        {"name": "Lamborghini Aventador", "price": 15000000, "colors": ["–ß–µ—Ä–Ω—ã–π", "–ë–µ–ª—ã–π", "–ö—Ä–∞—Å–Ω—ã–π", "–°–∏–Ω–∏–π", "–ó–µ–ª–µ–Ω—ã–π"]}
]
laptops = [
        {"name": "Irbis NB", "price": 8000, "colors": ["–ß–µ—Ä–Ω—ã–π", "–°–µ—Ä—ã–π", "–°–∏–Ω–∏–π", "–ö—Ä–∞—Å–Ω—ã–π", "–ë–µ–ª—ã–π"]},
        {"name": "Acer Extensa", "price": 25000, "colors": ["–ß–µ—Ä–Ω—ã–π", "–°–µ—Ä—ã–π", "–°–∏–Ω–∏–π", "–ö—Ä–∞—Å–Ω—ã–π", "–ë–µ–ª—ã–π"]},
        {"name": "Lenovo IdeaPad", "price": 35000, "colors": ["–ß–µ—Ä–Ω—ã–π", "–°–µ—Ä—ã–π", "–°–∏–Ω–∏–π", "–ö—Ä–∞—Å–Ω—ã–π", "–ë–µ–ª—ã–π"]},
        {"name": "HP 15s", "price": 46000, "colors": ["–ß–µ—Ä–Ω—ã–π", "–°–µ—Ä—ã–π", "–°–∏–Ω–∏–π", "–ö—Ä–∞—Å–Ω—ã–π", "–ë–µ–ª—ã–π"]},
        {"name": "ASUS VivoBook", "price": 52000, "colors": ["–ß–µ—Ä–Ω—ã–π", "–°–µ—Ä—ã–π", "–°–∏–Ω–∏–π", "–ö—Ä–∞—Å–Ω—ã–π", "–ë–µ–ª—ã–π"]},
        {"name": "Dell Inspiron", "price": 67000, "colors": ["–ß–µ—Ä–Ω—ã–π", "–°–µ—Ä—ã–π", "–°–∏–Ω–∏–π", "–ö—Ä–∞—Å–Ω—ã–π", "–ë–µ–ª—ã–π"]},
        {"name": "Huawei MateBook D", "price": 83000, "colors": ["–ß–µ—Ä–Ω—ã–π", "–°–µ—Ä—ã–π", "–°–∏–Ω–∏–π", "–ö—Ä–∞—Å–Ω—ã–π", "–ë–µ–ª—ã–π"]},
        {"name": "MacBook Air M1", "price": 120000, "colors": ["–ß–µ—Ä–Ω—ã–π", "–°–µ—Ä—ã–π", "–°–∏–Ω–∏–π", "–ö—Ä–∞—Å–Ω—ã–π", "–ë–µ–ª—ã–π"]},
        {"name": "ASUS ROG Strix", "price": 170000, "colors": ["–ß–µ—Ä–Ω—ã–π", "–°–µ—Ä—ã–π", "–°–∏–Ω–∏–π", "–ö—Ä–∞—Å–Ω—ã–π", "–ë–µ–ª—ã–π"]},
        {"name": "Apple MacBook Pro 16", "price": 350000, "colors": ["–ß–µ—Ä–Ω—ã–π", "–°–µ—Ä—ã–π", "–°–∏–Ω–∏–π", "–ö—Ä–∞—Å–Ω—ã–π", "–ë–µ–ª—ã–π"]}
]
adult_items = [
    {"name": "–í–∏—Å–∫–∏ Jack Daniels", "price": 5000, "colors": ["–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π"], "adult": True},
    {"name": "–°–∏–≥–∞—Ä—ã Cohiba", "price": 3000, "colors": ["–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π"], "adult": True},
    {"name": "–®–∞–º–ø–∞–Ω—Å–∫–æ–µ Moet", "price": 7000, "colors": ["–ó–æ–ª–æ—Ç–æ–π"], "adult": True},
    {"name": "–°—Ç—Ä–∏–Ω–≥–∏", "price": 2000, "colors": ["–ö—Ä–∞—Å–Ω—ã–π, –ß–µ—Ä–Ω—ã–π, –ë–µ–ª—ã–π"], "adult": True},
    {"name": "–ü–æ–Ω–æ—à–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∏–Ω–≥–∏", "price": 5000, "colors": ["–ö—Ä–∞—Å–Ω—ã–π, –ß–µ—Ä–Ω—ã–π, –ë–µ–ª—ã–π"], "adult": True},
    {"name": "–î–∏–ª–¥–æ", "price": 150000, "colors": ["10 —Å–º, 15 —Å–º, 20 —Å–º, 25 —Å–º"], "adult": True}

]

category_map = [
    ("üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã", phones),
    ("üöó –ú–∞—à–∏–Ω—ã", cars),
    ("üíª –ù–æ—É—Ç–±—É–∫–∏", laptops),
    ("üîû 18+", adult_items),
]

def get_all_items():
    all_items = []
    for _, items in category_map:
        all_items.extend(items)
    return all_items



from aiogram.fsm.state import State, StatesGroup
class ShopStates(StatesGroup):
    buying = State()

@dp.message(lambda m: m.text and m.text.lower() == "–º–∞–≥–∞–∑–∏–Ω")
async def shop_menu(msg: types.Message, state: FSMContext):
    text = "<b>üõí –ú–∞–≥–∞–∑–∏–Ω</b>\n\n"
    for idx, (cat_name, _) in enumerate(category_map, 1):
        text += f"{cat_name} ‚Äî –Ω–∞–ø–∏—à–∏ \"{cat_name.split(' ',1)[1].lower()}\"\n"
    text += '\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–ø–∏—à–∏: <i>–Ω–æ–º–µ—Ä —Ü–≤–µ—Ç</i> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 —á–µ—Ä–Ω—ã–π)\n–î–ª—è –≤—ã—Ö–æ–¥–∞: "–≤—ã—Ö–æ–¥"\n'
    await msg.answer(text, parse_mode="HTML")
    await state.set_state(ShopStates.buying)

@dp.message(ShopStates.buying)
async def shop_handler(msg: types.Message, state: FSMContext):
    text = msg.text.strip().lower()
    if text == "–≤—ã—Ö–æ–¥":
        await msg.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞.")
        await state.clear()
        return

    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    if text in ["—Ç–µ–ª–µ—Ñ–æ–Ω—ã", "–º–∞—à–∏–Ω—ã", "–Ω–æ—É—Ç–±—É–∫–∏", "18+"]:
        idx = ["—Ç–µ–ª–µ—Ñ–æ–Ω—ã", "–º–∞—à–∏–Ω—ã", "–Ω–æ—É—Ç–±—É–∫–∏", "18+"].index(text)
        cat_name, items = category_map[idx]
        out = f"<b>{cat_name}:</b>\n"
        for i, item in enumerate(items, 1):
            out += f"{i}. {item['name']} ‚Äî {item['price']} –∫–æ–∏–Ω–æ–≤ (—Ü–≤–µ—Ç–∞: {', '.join(item['colors'])})\n"
        out += "\n–î–ª—è –ø–æ–∫—É–ø–∫–∏: <i>–Ω–æ–º–µ—Ä —Ü–≤–µ—Ç</i> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 —á–µ—Ä–Ω—ã–π)\n–î–ª—è –≤—ã—Ö–æ–¥–∞: \"–≤—ã—Ö–æ–¥\""
        await msg.answer(out, parse_mode="HTML")
        return

    # –ü–æ–∫—É–ø–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∏ —Ü–≤–µ—Ç—É
    parts = msg.text.strip().split()
    if len(parts) < 2 or not parts[0].isdigit():
        await msg.answer("–§–æ—Ä–º–∞—Ç: –Ω–æ–º–µ—Ä —Ü–≤–µ—Ç. –ü—Ä–∏–º–µ—Ä: 1 —á–µ—Ä–Ω—ã–π\n–ò–ª–∏ –Ω–∞–ø–∏—à–∏ '–≤—ã—Ö–æ–¥' –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞.")
        return

    number = int(parts[0])
    color = " ".join(parts[1:]).capitalize()
    all_items = get_all_items()
    if not (1 <= number <= len(all_items)):
        await msg.answer("–ù–µ—Ç —Ç–æ–≤–∞—Ä–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º.")
        return

    item = all_items[number - 1]
    if color not in item["colors"]:
        await msg.answer(f"–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(item['colors'])}")
        return

    user = get_user(msg.from_user.id)
    if user["coins"] < item["price"]:
        await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
        return

    user["coins"] -= item["price"]
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–∏–ø—É —Ç–æ–≤–∞—Ä–∞
    if item in phones:
        user["phone"] = f"{item['name']} ({color})"
    elif item in cars:
        user["car"] = f"{item['name']} ({color})"
    elif item in laptops:
        user["notebook"] = f"{item['name']} ({color})"
    elif item in adult_items:
        user.setdefault("adult_items", []).append(f"{item['name']} ({color})")
    update_user(msg.from_user.id, user)
    await msg.answer(f"–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!\n–¢—ã –∫—É–ø–∏–ª {item['name']} —Ü–≤–µ—Ç–∞ {color} –∑–∞ {item['price']} –∫–æ–∏–Ω–æ–≤.\n–û—Å—Ç–∞–ª–æ—Å—å: {user['coins']} –∫–æ–∏–Ω–æ–≤.")
    await state.clear()



import logging
import sys

from telegram.ext import Updater, CommandHandler
from host import Host
from game import GameStatus
from player import Player, roles


class Player(object):
    """player"""
    def __init__(self, user, game_master=False):
        self.identity = user.id
        self.name = (user.first_name +' '+ user.last_name).encode('utf-8')
        if len(self.name) == 0:
            self.name = (user.username).encode('utf-8')
        self.role = None
        if game_master:
            self.role = '‚òùüèΩÔ∏è –í–µ–¥—É—â–∏–π'

    def __eq__(self, other):
        return self.identity == other.id

roles = {
    'mafia' : 'üî´ –ú–∞—Ñ–∏—è',
    'godfather' : 'üíÇ –ö—Ä–µ—Å—Ç–Ω—ã–π –æ—Ç–µ—Ü',
    'civilian' : 'üë¶ –û–±—ã–≤–∞—Ç–µ–ª—å',
    'detective' : 'üëÆ –î–µ—Ç–µ–∫—Ç–∏–≤',
    'doctor' : 'üöë –î–æ–∫—Ç–æ—Ä',
    'prostitute' : 'üíÉ –ö—Ä–∞—Å–æ—Ç–∫–∞',
    'killer' : 'üî™ –ú–∞–Ω—å—è–∫'
}

if len(sys.argv) > 1:
    token = sys.argv[1]
else:
    token = "7750083612:AAG2BGjYAHPtY4bkSZetxlJ4fmDa-6jEqKA"

logging.basicConfig(filename='bot.log',level=logging.INFO)

logger = logging.getLogger('mafiapartygamebot')

logger.setLevel(logging.INFO)

logger.info('bot started')

host = Host()

def new(bot, update):
    """start new game"""
    game = host.get_game(update.message.chat_id)
    if game and game.state == GameStatus.waiting:
        bot.sendMessage(
            update.message.chat_id,
            '–ú—ã —É–∂–µ –æ–∂–∏–¥–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤! \r\n{} {}'
            .format(game.game_master.name, game.game_master.role))
    elif game and game.state == GameStatus.started:
        bot.sendMessage(
            update.message.chat_id,
            '–ê –º—ã —É–∂–µ –∏–≥—Ä–∞–µ–º üòÅ –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /cancel')
    else:
        game = host.create_game(update.message.chat_id, update.message.from_user)
        game_master = game.game_master
        bot.sendMessage(
            update.message.chat_id,
            '–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –±—ã—Å—Ç—Ä–µ–µ! \r\n{} {}'
            .format(game_master.name, game_master.role))

def join(bot, update):
    """join game"""
    game = host.get_game(update.message.chat_id)

    if game is None:
        bot.sendMessage(
            update.message.chat_id,
            '–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /new')
    else:
        if game.game_master.identity == update.message.from_user.id:
            bot.sendMessage(
                update.message.chat_id,
                '–í–µ–¥—É—â–∏–π –∏–≥—Ä–∞–µ—Ç —Ä–æ–ª—å –≤–µ–¥—É—â–µ–≥–æ...')
        else:
            player = game.add_player(update.message.from_user)
            if player:
                bot.sendMessage(
                    update.message.chat_id,
                    '–ö –∏–≥—Ä–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è {}'.format(player.name))

def play(bot, update):
    """play new game"""
    game = host.get_game(update.message.chat_id)

    if not game:
        bot.sendMessage(
            update.message.chat_id,
            '–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /new')

    elif game and game.state == GameStatus.waiting:
        if game.game_master.identity != update.message.from_user.id:
            bot.sendMessage(
                update.message.chat_id,
                '–¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É. \r\n{} {}'
                .format(game.game_master.name, game.game_master.role))
        else:
            game.start()
            game_master = game.game_master

            if len(game.players) == 0:
                bot.sendMessage(update.message.chat_id, '–î–ª—è –∏–≥—Ä—ã –≤ –º–∞—Ñ–∏–∏ –Ω—É–∂–Ω—ã –∏–≥—Ä–æ–∫–∏ üòä')
                return

            players = ['–†–æ–ª–∏ –∏–≥—Ä–æ–∫–æ–≤: \r\n']
            for player in game.players:
                players.append('{} {}'.format(player.role, player.name))
                bot.sendMessage(player.identity, '‚ùóÔ∏è –¢–≤–æ—è —Ä–æ–ª—å {}'.format(player.role))

            bot.sendMessage(game_master.identity, '\r\n'.join(players))

            bot.sendMessage(
                update.message.chat_id,
                '–ì–æ—Ä–æ–¥ –∑–∞—Å—ã–ø–∞–µ—Ç üí§ \r\n{} {}'.format(game_master.name, game_master.role))

    elif game and game.state == GameStatus.started:
        bot.sendMessage(
            update.message.chat_id,
            '–ê –º—ã —É–∂–µ –∏–≥—Ä–∞–µ–º üòÅ –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /cancel')

def cancel(bot, update):
    """cancel game"""
    game = host.get_game(update.message.chat_id)

    if game:
        game_master = game.game_master
        if game_master.identity != update.message.from_user.id:
            bot.sendMessage(
                update.message.chat_id,
                '–¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É. \r\n{} {}'
                .format(game_master.name, game_master.role))
        else:
            host.delete_game(update.message.chat_id)
            bot.sendMessage(update.message.chat_id, '–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ üòê')
    else:
        bot.sendMessage(update.message.chat_id, '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ üò≥')

def help(bot, update):
    """print help"""
    bot.sendMessage(update.message.chat_id,
                    '/new - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã \r\n'+
                    '/join - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ \r\n'+
                    '/play - –≥–æ—Ä–æ–¥ –∑–∞—Å—Å—ã–ø–∞–µ—Ç... \r\n'+
                    '/cancel - –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É')

from queue import Queue
updater = Updater(token, Queue())

from telegram.ext import Application, CommandHandler

application = Application.builder().token(token).build()

application.add_handler(CommandHandler('new', new))
application.add_handler(CommandHandler('join', join))
application.add_handler(CommandHandler('play', play))
application.add_handler(CommandHandler('cancel', cancel))
application.add_handler(CommandHandler('help', help))


@dp.message(lambda m: m.text and m.text.lower() == "–≤—ã–¥–∞—Ç—å –∫–æ–∏–Ω—ã")
async def admin_give_coins(msg: Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await state.set_state(AdminStates.entering_coins)
    await msg.answer("–í–≤–µ–¥–∏ —Å–∫–æ–ª—å–∫–æ –∫–æ–∏–Ω–æ–≤ –≤—ã–¥–∞—Ç—å:")

@dp.message(AdminStates.entering_coins)
async def process_coins_amount(m: Message, state: FSMContext):
    try:
        coins = int(m.text)
        user = get_user(m.from_user.id)
        user["coins"] += coins
        update_user(m.from_user.id, user)
        await m.answer(f"–í—ã–¥–∞–Ω–æ {coins} –∫–æ–∏–Ω–æ–≤. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user['coins']}")
    except:
        await m.answer("–û—à–∏–±–∫–∞. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
    await state.clear()

@dp.message(lambda m: m.text and m.text.lower() == "–≤—ã–¥–∞—Ç—å –º–∞–Ω—É")
async def admin_give_mana(msg: Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await state.set_state(AdminStates.entering_mana)
    await msg.answer("–í–≤–µ–¥–∏ —Å–∫–æ–ª—å–∫–æ –º–∞–Ω—ã –≤—ã–¥–∞—Ç—å:")

@dp.message(AdminStates.entering_mana)
async def process_mana_amount(m: Message, state: FSMContext):
    try:
        mana = int(m.text)
        user = get_user(m.from_user.id)
        user["mana"] += mana
        update_user(m.from_user.id, user)
        await m.answer(f"–í—ã–¥–∞–Ω–æ {mana} –º–∞–Ω—ã. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user['mana']}")
    except:
        await m.answer("–û—à–∏–±–∫–∞. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
    await state.clear()

@dp.message(lambda m: m.text and m.text.lower() == "–≤—ã–¥–∞—Ç—å –º–∞—à–∏–Ω—É")
async def admin_give_car(msg: Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await state.set_state(AdminStates.entering_car)
    await msg.answer("–í–≤–µ–¥–∏ –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω—ã –¥–ª—è –≤—ã–¥–∞—á–∏:")

@dp.message(AdminStates.entering_car)
async def process_car_amount(m: Message, state: FSMContext):
    car_model = m.text.strip()
    user = get_user(m.from_user.id)
    user["car"] = car_model
    update_user(m.from_user.id, user)
    await m.answer(f"–í—ã–¥–∞–Ω–∞ –º–∞—à–∏–Ω–∞: {car_model}")
    await state.clear()

@dp.message(lambda m: m.text and m.text.lower() == "–≤—ã–¥–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω")
async def admin_give_phone(msg: Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await state.set_state(AdminStates.entering_phone)
    await msg.answer("–í–≤–µ–¥–∏ –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –≤—ã–¥–∞—á–∏:")

@dp.message(AdminStates.entering_phone)
async def process_phone_amount(m: Message, state: FSMContext):
    phone_model = m.text.strip()
    user = get_user(m.from_user.id)
    user["phone"] = phone_model
    update_user(m.from_user.id, user)
    await m.answer(f"–í—ã–¥–∞–Ω —Ç–µ–ª–µ—Ñ–æ–Ω: {phone_model}")
    await state.clear()

@dp.message(lambda m: m.text and m.text.lower() == "–≤—ã–¥–∞—Ç—å –Ω–æ—É—Ç–±—É–∫")
async def admin_give_notebook(msg: Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await state.set_state(AdminStates.entering_notebook)
    await msg.answer("–í–≤–µ–¥–∏ –º–æ–¥–µ–ª—å –Ω–æ—É—Ç–±—É–∫–∞ –¥–ª—è –≤—ã–¥–∞—á–∏:")

@dp.message(lambda m: m.text and m.text.lower() in ['–æ—Ç–º–µ–Ω–∞', '/–æ—Ç–º–µ–Ω–∞', 'cancel'])
async def cancel_any_fsm(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=ReplyKeyboardRemove())


@dp.message(AdminStates.entering_notebook)
async def process_notebook_amount(m: Message, state: FSMContext):
    notebook_model = m.text.strip()
    user = get_user(m.from_user.id)
    user["notebook"] = notebook_model
    update_user(m.from_user.id, user)
    await m.answer(f"–í—ã–¥–∞–Ω –Ω–æ—É—Ç–±—É–∫: {notebook_model}")
    await state.clear()


# ...–≤—Å–µ —Ç–≤–æ–∏ –∏–º–ø–æ—Ä—Ç—ã –∏ –∫–æ–¥ –≤—ã—à–µ...

@dp.message(lambda m: m.text and m.text.lower() == "–ø—Ä–æ—Ñ–∏–ª—å")
async def profile(msg: Message):
    user = get_user(msg.from_user.id)
    user["level"] = calc_level(user.get("messages", 0))
    update_user(msg.from_user.id, {"level": user["level"]})
    text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n"
        f"–ü–∞—Ä–∞–¥–∏–∑–∫–æ–∏–Ω—ã: <b>{user['coins']}</b>\n"
        f"–ü–∞—Ä–∞–¥–∏–∑ –º–∞–Ω–∞: <b>{user['mana']}</b>\n"
        f"–£—Ä–æ–≤–µ–Ω—å: <b>{user['level']}</b>\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–π: <b>{user.get('messages',0)}</b>\n"
        f"üöó –ú–∞—à–∏–Ω–∞: <b>{user['car']}</b>\n"
        f"üè¢ –ë–∏–∑–Ω–µ—Å: <b>{user['business']}</b>\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: <b>{user['phone']}</b>\n"
        f"üíª –ù–æ—É—Ç–±—É–∫: <b>{user['notebook']}</b>\n"
        f"üíº –†–∞–±–æ—Ç–∞: <b>{user.get('job','–ë–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–π')}</b>"
    )
    await msg.answer(text, parse_mode=ParseMode.HTML)

# ...–æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã...

# –í help/–ø–æ–º–æ—â—å –¥–æ–±–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ
@dp.message(lambda m: m.text and m.text.lower() == "–ø–æ–º–æ—â—å")
async def help_command(msg: Message):
    await msg.answer(
        "üÜò <b>–ü–æ–º–æ—â—å</b>\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "–ø–∞—Ä–∞–¥–∏–∑ ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "–º–∞–≥–∞–∑–∏–Ω ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω\n"
        "—Ç–µ–ª–µ—Ñ–æ–Ω—ã ‚Äî —Å–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤\n"
        "–º–∞—à–∏–Ω—ã ‚Äî —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω\n"
        "–Ω–æ—É—Ç–±—É–∫–∏ ‚Äî —Å–ø–∏—Å–æ–∫ –Ω–æ—É—Ç–±—É–∫–æ–≤\n"
        "–ø—Ä–æ—Ñ–∏–ª—å ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "—Ä–∞–±–æ—Ç–∞ ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é\n"
        "–∑–∞—Ä–ø–ª–∞—Ç–∞ ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É –Ω–∞ —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—Ç–µ\n"
        "—Ñ–µ—Ä–º–∞ ‚Äî –∑–∞–π—Ç–∏ –Ω–∞ —Ñ–µ—Ä–º—É\n"
        "–±–æ–Ω—É—Å ‚Äî –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å\n"
        "–ø—Ä–æ–º–æ–∫–æ–¥ ‚Äî –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n"
        "–∞–¥–º–∏–Ω ‚Äî –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n"
        "\n"
        "<b>–§–µ—Ä–º–µ—Ä—Å–∫–∏–µ:</b>\n"
        "—Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥—Ä—è–¥–æ–∫ ‚Äî —á—Ç–æ —Ä–∞—Å—Ç–µ—Ç –∏ —Å–∫–æ–ª—å–∫–æ –∂–¥–∞—Ç—å\n"
        "–ø–æ—Å–∞–¥–∏—Ç—å [–∫—É–ª—å—Ç—É—Ä—É] ‚Äî –±—ã—Å—Ç—Ä–æ –ø–æ—Å–∞–¥–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ\n"
        "—Å–æ–±—Ä–∞—Ç—å —É—Ä–æ–∂–∞–π ‚Äî —Å–æ–±—Ä–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π —É—Ä–æ–∂–∞–π\n"
        "–∫—É–ø–∏—Ç—å –≥—Ä—è–¥–∫—É ‚Äî —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Ñ–µ—Ä–º—É\n"
        "–∫—É–ø–∏—Ç—å —É–¥–æ–±—Ä–µ–Ω–∏–µ ‚Äî —É—Å–∫–æ—Ä–∏—Ç—å —Ä–æ—Å—Ç\n"
        "\n"
        "<b>–≠–∫–æ–Ω–æ–º–∏–∫–∞ –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:</b>\n"
        "–∫—É—Ä—Å –≤–∞–ª—é—Ç ‚Äî —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å –∏–≥—Ä–æ–≤—ã—Ö –≤–∞–ª—é—Ç –∏ –¥–æ–ª–ª–∞—Ä–∞\n"
        "–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∞—Å—ã –∏ –ø—Ä–µ–¥–º–µ—Ç—ã\n"
        "\n"
        "<b>–ü–æ–≥–æ–¥–∞ –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:</b>\n"
        "–ø–æ–≥–æ–¥–∞ [–≥–æ—Ä–æ–¥] ‚Äî —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ\n"
        "\n"
        "<b>–ê—É–∫—Ü–∏–æ–Ω:</b>\n"
        "–∞—É–∫—Ü–∏–æ–Ω [–ø—Ä–µ–¥–º–µ—Ç] [–Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞] ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –∞—É–∫—Ü–∏–æ–Ω\n"
        "—Å—Ç–∞–≤–∫–∞ [—Ü–µ–Ω–∞] ‚Äî —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω\n"
        "–º–æ–∏ —Å–¥–µ–ª–∫–∏ ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∞—É–∫—Ü–∏–æ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏\n"
        "\n"
        "<b>–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ:</b>\n"
        "–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ @user —Å—É–º–º–∞ ‚Äî –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫–æ–∏–Ω—ã\n"
        "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ @user ‚Äî —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
        "—Å–æ–≥–ª–∞—Å–µ–Ω ‚Äî –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–±—Ä–∞–∫)\n"
        "—Ä–∞–∑–≤–æ–¥ ‚Äî —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç—å –±—Ä–∞–∫\n"
        "\n"
        "–î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ: <i>–Ω–æ–º–µ—Ä —Ü–≤–µ—Ç</i> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 —á–µ—Ä–Ω—ã–π)\n"
        "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ!\n",
        parse_mode=ParseMode.HTML
    )

# ...–æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–≤–æ–π –∫–æ–¥...
import time
from aiogram import Bot
from aiogram.types import Message

# –§—É–Ω–∫—Ü–∏–∏ is_admin, is_moderator, get_user, update_user –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤—ã—à–µ!

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –±–ª–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±—Ä–∞–∫–∞
pending_marriages = {}  # user_id: partner_id

@dp.message(lambda m: m.text and m.text.lower().startswith("–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ "))
async def propose_marriage(msg: Message):
    parts = msg.text.split()
    if len(parts) < 2:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ @user")
        return
    to_name = parts[1]
    db = load_db()
    to_id = None
    to_search = to_name.replace("@", "").lower()
    for uid, data in db.items():
        if not isinstance(data, dict):
            continue
        if (data.get("nick", "").lower() == to_search or data.get("username", "").lower() == to_search):
            to_id = int(uid)
            break
    if not to_id:
        await msg.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if to_id == msg.from_user.id:
        await msg.answer("–ù–µ–ª—å–∑—è –∂–µ–Ω–∏—Ç—å—Å—è –Ω–∞ —Å–µ–±–µ :)")
        return
    user = get_user(msg.from_user.id)
    if user.get("partner"):
        await msg.answer("–¢—ã —É–∂–µ –≤ –±—Ä–∞–∫–µ!")
        return
    partner = get_user(to_id)
    if partner.get("partner"):
        await msg.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±—Ä–∞–∫–µ!")
        return
    pending_marriages[to_id] = msg.from_user.id
    await msg.answer(f"–¢—ã —Å–¥–µ–ª–∞–ª(-–∞) –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {to_name}! –ñ–¥—ë–º –æ—Ç–≤–µ—Ç–∞.")
    try:
        await msg.bot.send_message(
            to_id,
            f"–í–∞–º —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞! –ù–∞–ø–∏—à–∏—Ç–µ '—Å–æ–≥–ª–∞—Å–µ–Ω' —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å."
        )
    except Exception:
        pass

# –°–∏—Å—Ç–µ–º–∞ –±—Ä–∞–∫–æ–≤
pending_marriages = {}  # user_id: partner_id

@dp.message(lambda m: m.text and m.text.lower().startswith("–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ "))
async def propose_marriage(msg: Message):
    parts = msg.text.split()
    if len(parts) < 2:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ @user")
        return
    to_name = parts[1]
    db = load_db()
    to_id = None
    to_search = to_name.replace("@", "").lower()
    for uid, data in db.items():
        if not isinstance(data, dict):
            continue
        if (data.get("nick", "").lower() == to_search or data.get("username", "").lower() == to_search):
            to_id = int(uid)
            break
    if not to_id:
        await msg.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if to_id == msg.from_user.id:
        await msg.answer("–ù–µ–ª—å–∑—è –∂–µ–Ω–∏—Ç—å—Å—è –Ω–∞ —Å–µ–±–µ :)")
        return
    user = get_user(msg.from_user.id)
    if user.get("partner"):
        await msg.answer("–¢—ã —É–∂–µ –≤ –±—Ä–∞–∫–µ!")
        return
    partner = get_user(to_id)
    if partner.get("partner"):
        await msg.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±—Ä–∞–∫–µ!")
        return
    pending_marriages[to_id] = msg.from_user.id
    await msg.answer(f"–¢—ã —Å–¥–µ–ª–∞–ª(-–∞) –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {to_name}! –ñ–¥—ë–º –æ—Ç–≤–µ—Ç–∞.")
    try:
        await msg.bot.send_message(to_id, f"–í–∞–º —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞! –ù–∞–ø–∏—à–∏—Ç–µ '—Å–æ–≥–ª–∞—Å–µ–Ω' —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å.")
    except Exception:
        pass

@dp.message(lambda m: m.text and m.text.lower() == "—Å–æ–≥–ª–∞—Å–µ–Ω")
async def accept_marriage(msg: Message):
    user_id = msg.from_user.id
    if user_id not in pending_marriages:
        await msg.answer("–í–∞–º –Ω–∏–∫—Ç–æ –Ω–µ –¥–µ–ª–∞–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
        return
    partner_id = pending_marriages.pop(user_id)
    user = get_user(user_id)
    partner = get_user(partner_id)
    user["partner"] = partner_id
    partner["partner"] = user_id
    update_user(user_id, user)
    update_user(partner_id, partner)
    await msg.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å –≤—ã –≤ –±—Ä–∞–∫–µ ‚ù§Ô∏è")
    try:
        await msg.bot.send_message(partner_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.get('nick') or '@'+user.get('username', str(user_id))} —Å–æ–≥–ª–∞—Å–∏–ª—Å—è(-–∞—Å—å) –≤—ã–π—Ç–∏ –∑–∞ –≤–∞—Å –∑–∞–º—É–∂/–∂–µ–Ω–∏—Ç—å—Å—è!")
    except Exception:
        pass

@dp.message(lambda m: m.text and m.text.lower() == "—Ä–∞–∑–≤–æ–¥")
async def divorce(msg: Message):
    user = get_user(msg.from_user.id)
    if not user.get("partner"):
        await msg.answer("–í—ã –Ω–µ –≤ –±—Ä–∞–∫–µ!")
        return
    partner_id = user["partner"]
    partner = get_user(partner_id)
    user["partner"] = None
    if partner:
        partner["partner"] = None
        update_user(partner_id, partner)
        try:
            await msg.bot.send_message(partner_id, "–í–∞–º –ø–æ–¥–∞–ª–∏ –Ω–∞ —Ä–∞–∑–≤–æ–¥ üíî")
        except Exception:
            pass
    update_user(msg.from_user.id, user)
    await msg.answer("–í—ã —Ä–∞–∑–≤–µ–ª–∏—Å—å.")


from aiogram.fsm.state import State, StatesGroup

class PromoStates(StatesGroup):
    promo_code_step1 = State()
    promo_code_step2 = State()
    promo_code_step3 = State()


@dp.message(lambda m: m.text and m.text.lower() == "—Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥")
async def create_promo_start(msg: Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await msg.answer("–í–≤–µ–¥–∏ –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: SUMMER2025):")
    await state.set_state(PromoStates.promo_code_step1)

@dp.message(PromoStates.promo_code_step1)
async def promo_code_step1(msg: Message, state: FSMContext):
    code = msg.text.strip()
    await state.update_data(code=code)
    await msg.answer("–¢–∏–ø –Ω–∞–≥—Ä–∞–¥—ã: coins –∏–ª–∏ mana?")
    await state.set_state(PromoStates.promo_code_step2)

@dp.message(PromoStates.promo_code_step2)
async def promo_code_step2(msg: Message, state: FSMContext):
    reward_type = msg.text.strip().lower()
    if reward_type not in ["coins", "mana"]:
        await msg.answer("–í–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ coins –∏–ª–∏ mana!")
        return
    await state.update_data(reward_type=reward_type)
    await msg.answer("–í–≤–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã (—Å–∫–æ–ª—å–∫–æ):")
    await state.set_state(PromoStates.promo_code_step3)

@dp.message(PromoStates.promo_code_step3)
async def promo_code_step3(msg: Message, state: FSMContext):
    try:
        value = int(msg.text.strip())
    except Exception:
        await msg.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ!")
        return
    data = await state.get_data()
    code = data["code"]
    reward_type = data["reward_type"]
    create_promo(code, reward_type, value)
    await msg.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ {code} —Å–æ–∑–¥–∞–Ω! –¢–∏–ø: {reward_type}, –∑–Ω–∞—á–µ–Ω–∏–µ: {value}")
    await state.clear()

# –ú–£–¢
@dp.message(lambda m: m.text and m.text.startswith("–º—É—Ç"))
async def mute_user(msg: Message):
    if not (is_admin(msg.from_user.id) or is_moderator(msg.from_user.id)):
        return
    try:
        args = msg.text.split()
        user_id = int(args[1])
        mins = int(args[2])
        reason = " ".join(args[3:]) or "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"
        mute_until = int(time.time()) + mins*60
        user = get_user(user_id)
        user["muted"] = True
        user["mute_until"] = mute_until
        user["mute_reason"] = reason
        update_user(user_id, user)
        await msg.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ –º—É—Ç–µ –Ω–∞ {mins} –º–∏–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
    except Exception:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –º—É—Ç user_id –º–∏–Ω—É—Ç—ã –ø—Ä–∏—á–∏–Ω–∞")

@dp.message(lambda m: m.text and m.text.startswith("—Ä–∞–∑–º—É—Ç"))
async def unmute_user(msg: Message):
    if not (is_admin(msg.from_user.id) or is_moderator(msg.from_user.id)):
        return
    try:
        args = msg.text.split()
        user_id = int(args[1])
        user = get_user(user_id)
        user["muted"] = False
        user["mute_until"] = 0
        user["mute_reason"] = ""
        update_user(user_id, user)
        await msg.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–º—É—á–µ–Ω.")
    except:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: —Ä–∞–∑–º—É—Ç user_id")

    print('user:', msg.from_user.id, user)


@dp.message(lambda m: m.text and m.text.startswith("–º–æ–¥–µ—Ä"))
async def grant_moder(msg: Message):
    if not is_admin(msg.from_user.id):
        await msg.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    try:
        args = msg.text.split()
        user_id = int(args[1])
        add_moderator(user_id)
        await msg.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ç–µ–ø–µ—Ä—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä!")
    except Exception:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –º–æ–¥–µ—Ä user_id")

# –•–µ–Ω–¥–ª–µ—Ä —Å–Ω—è—Ç–∏—è –º–æ–¥–µ—Ä–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.message(lambda m: m.text and m.text.startswith("—Ä–∞–∑–º–æ–¥–µ—Ä"))
async def revoke_moder(msg: Message):
    if not is_admin(msg.from_user.id):
        await msg.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    try:
        args = msg.text.split()
        user_id = int(args[1])
        remove_moderator(user_id)
        await msg.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±–æ–ª—å—à–µ –Ω–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä.")
    except Exception:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: —Ä–∞–∑–º–æ–¥–µ—Ä user_id")

@dp.message(lambda m: m.text and m.text.startswith("–º–æ–¥–µ—Ä—ã"))
async def list_moders(msg: Message):
    db = load_db()
    mods = db.get("moderators", [])
    if mods:
        await msg.answer("–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã:\n" + "\n".join(mods))
    else:
        await msg.answer("–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")

@dp.message(lambda m: m.text and m.text.startswith("—Ä–æ–ª—å"))
async def who_am_i(msg: Message):
    if is_admin(msg.from_user.id):
        role = "–ê–¥–º–∏–Ω"
    elif is_moderator(msg.from_user.id):
        role = "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä"
    else:
        role = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    await msg.answer(f"–í–∞—à–∞ —Ä–æ–ª—å: {role}")

@dp.message(lambda m: m.text and m.text.startswith("–º–æ–¥–ø–æ–º–æ—â—å"))
async def moder_help(msg: Message):
    if not can_moderate(msg.from_user.id):
        return
    await msg.answer(
        "–º—É—Ç user_id –º–∏–Ω –ø—Ä–∏—á–∏–Ω–∞ ‚Äî –≤—ã–¥–∞—Ç—å –º—É—Ç\n"
        "—Ä–∞–∑–º—É—Ç user_id ‚Äî —Å–Ω—è—Ç—å –º—É—Ç\n"

        "–∫–∏–∫ user_id ‚Äî –∫–∏–∫–Ω—É—Ç—å\n"
        "–º–æ–¥–µ—Ä—ã ‚Äî —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–æ–≤\n"
        "—Ä–æ–ª—å ‚Äî —É–∑–Ω–∞—Ç—å —Å–≤–æ—é —Ä–æ–ª—å"
    )


@dp.message(lambda m: m.text and m.text.lower().startswith("–Ω–∏–∫ "))
async def set_nick(msg: Message):
    nick = msg.text[4:].strip()
    if not (1 <= len(nick) <= 32):
        await msg.answer("–ù–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∏–∫–∞!
    user = get_user(msg.from_user.id)
    user["nick"] = nick
    update_user(msg.from_user.id, user)
    await msg.answer(f"–¢–≤–æ–π –Ω–∏–∫ —Ç–µ–ø–µ—Ä—å: <b>{nick}</b>", parse_mode="HTML")

# –ö–ò–ö (–∏–∑ –≥—Ä—É–ø–ø—ã)
@dp.message(lambda m: m.text and m.text.startswith("–∫–∏–∫"))
async def kick_user(msg: Message):
    if not (is_admin(msg.from_user.id) or is_moderator(msg.from_user.id)):
        return
    try:
        args = msg.text.split()
        user_id = int(args[1])
        try:
            await msg.bot.ban_chat_member(msg.chat.id, user_id)
            await msg.bot.unban_chat_member(msg.chat.id, user_id)
            await msg.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∫–∏–∫–Ω—É—Ç –∏–∑ –≥—Ä—É–ø–ø—ã.")
        except Exception as err:
            await msg.answer(f"–û—à–∏–±–∫–∞ –∫–∏–∫–∞: {err}")
    except:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –∫–∏–∫ user_id")

# –ü–æ–≥–æ–¥–∞
@dp.message(lambda m: m.text and m.text.lower().startswith("–ø–æ–≥–æ–¥–∞"))
async def weather(msg: types.Message):
    parts = msg.text.split(maxsplit=1)
    if len(parts) < 2:
        await msg.answer("–ù–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–≥–æ–¥–∞ –ú–æ—Å–∫–≤–∞")
        return
    city = parts[1]
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&units=metric&lang=ru&appid={OPENWEATHER_API_KEY}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            data = await resp.json()
            if data.get("cod") != 200:
                await msg.answer("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            temp = data["main"]["temp"]
            desc = data["weather"][0]["description"]
            await msg.answer(f"–ü–æ–≥–æ–¥–∞ –≤ {city}: {desc}, {temp}¬∞C")

# –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
@dp.message(lambda m: m.text and m.text.lower() == "–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")
async def show_inventory(msg: Message):
    user = get_user(msg.from_user.id)
    text = "<b>üéí –¢–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:</b>\n"

    # –û–±—ã—á–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    if user.get("phone"):
        text += f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}\n"
    if user.get("car"):
        text += f"‚Ä¢ –ú–∞—à–∏–Ω–∞: {user['car']}\n"
    if user.get("notebook"):
        text += f"‚Ä¢ –ù–æ—É—Ç–±—É–∫: {user['notebook']}\n"
    if user.get("adult_items"):
        text += "‚Ä¢ 18+: " + ", ".join(user["adult_items"]) + "\n"

    # NFT –ø–æ–¥–∞—Ä–∫–∏ ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–º –±–ª–æ–∫–æ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—É—Å—Ç–æ
    nft = user.get("nft_items", [])
    text += "\n<b>üéÅ NFT-–ø–æ–¥–∞—Ä–∫–∏:</b>\n"
    if nft:
        for n in nft:
            text += f"‚Ä¢ {n}\n"
    else:
        text += "–ù–µ—Ç\n"

    await msg.answer(text, parse_mode="HTML")

# –ö—É—Ä—Å –≤–∞–ª—é—Ç (–∏–≥—Ä–æ–≤–æ–π –∏ —Ä–µ–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞)
@dp.message(lambda m: m.text and m.text.lower() == "–∫—É—Ä—Å –≤–∞–ª—é—Ç")
async def currency_rate(msg: types.Message):
    coin_to_mana = 10
    text = f"–ò–≥—Ä–æ–≤–æ–π –∫—É—Ä—Å: 1 –º–∞–Ω–∞ = {coin_to_mana} –∫–æ–∏–Ω–æ–≤\n"
    url = "https://www.cbr-xml-daily.ru/daily_json.js"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            data = await resp.json(content_type=None)  # <-- –≤–æ—Ç –∑–¥–µ—Å—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            usd = data["Valute"]["USD"]["Value"]
            text += f"–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞: {usd:.2f} RUB"
    await msg.answer(text)


active_auctions = {}  # item -> auction dict

@dp.message(lambda m: m.text and m.text.lower().startswith("–∞—É–∫—Ü–∏–æ–Ω"))
async def auction_start(msg: types.Message):
    parts = msg.text.split(maxsplit=2)
    if len(parts) < 3 or not parts[2].isdigit():
        await msg.answer("–§–æ—Ä–º–∞—Ç: –∞—É–∫—Ü–∏–æ–Ω [–ø—Ä–µ–¥–º–µ—Ç] [–Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞]\n–ü—Ä–∏–º–µ—Ä: –∞—É–∫—Ü–∏–æ–Ω –∞—Ä–±—É–∑ 100")
        return
    item = parts[1]
    price = int(parts[2])
    if item in active_auctions:
        await msg.answer("–ê—É–∫—Ü–∏–æ–Ω –Ω–∞ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ –∏–¥—ë—Ç!")
        return
    active_auctions[item] = {"owner": msg.from_user.id, "price": price, "winner": None}
    await msg.answer(f"–ê—É–∫—Ü–∏–æ–Ω –Ω–∞ {item} –æ—Ç–∫—Ä—ã—Ç! –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {price}. –î–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π '—Å—Ç–∞–≤–∫–∞ N'.")

@dp.message(lambda m: m.text and m.text.lower().startswith("—Å—Ç–∞–≤–∫–∞"))
async def auction_bid(msg: types.Message):
    parts = msg.text.split()
    if len(parts) < 2 or not parts[1].isdigit():
        await msg.answer("–§–æ—Ä–º–∞—Ç: —Å—Ç–∞–≤–∫–∞ [—Ü–µ–Ω–∞]\n–ü—Ä–∏–º–µ—Ä: —Å—Ç–∞–≤–∫–∞ 150")
        return
    bid = int(parts[1])
    # –∏—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∞—É–∫—Ü–∏–æ–Ω —Å —Å–∞–º–æ–π –≤—ã—Å–æ–∫–æ–π —Ü–µ–Ω–æ–π
    for item, auction in active_auctions.items():
        if bid > auction["price"]:
            auction["price"] = bid
            auction["winner"] = msg.from_user.id
            await msg.answer(f"–°—Ç–∞–≤–∫–∞ {bid} –Ω–∞ {item} –ø—Ä–∏–Ω—è—Ç–∞! –í—ã ‚Äî –ª–∏–¥–µ—Ä.")
            return
    await msg.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –∏–ª–∏ –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞.")

@dp.message(lambda m: m.text and m.text.lower() == "–º–æ–∏ —Å–¥–µ–ª–∫–∏")
async def my_auctions(msg: types.Message):
    text = "<b>–¢–≤–æ–∏ –∞—É–∫—Ü–∏–æ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏:</b>\n"
    found = False
    for item, auction in active_auctions.items():
        if auction.get("winner") == msg.from_user.id or auction.get("owner") == msg.from_user.id:
            text += f"{item}: —Ü–µ–Ω–∞ {auction['price']}, –ª–∏–¥–µ—Ä: {auction.get('winner')}\n"
            found = True
    if not found:
        text += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫."
    await msg.answer(text, parse_mode="HTML")



import os
import pickle
from datetime import datetime, timedelta
from market_items import market_extra_items

MARKET_STATE_FILE = "market_state.pkl"

def get_market_items():
    if os.path.exists(MARKET_STATE_FILE):
        with open(MARKET_STATE_FILE, "rb") as f:
            state = pickle.load(f)
        if datetime.now() < state["expires"]:
            return state["items"]
    # –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ä—ã–Ω–æ–∫
    all_items = []
    phones_sample = random.sample(phones, 2)
    cars_sample = random.sample(cars, 1)
    laptops_sample = random.sample(laptops, 1)
    # –°–∫–∏–¥–∫–∞ 25%
    for it in phones_sample+cars_sample+laptops_sample:
        item = it.copy()
        item["price"] = int(item["price"] * 0.75)
        all_items.append(item)
    extra = random.sample(market_extra_items, min(2, len(market_extra_items)))
    all_items.extend(extra)
    state = {"items": all_items, "expires": datetime.now() + timedelta(hours=6)}
    with open(MARKET_STATE_FILE, "wb") as f:
        pickle.dump(state, f)
    return all_items


@dp.message(lambda m: m.text and m.text.lower() == "—Ä—ã–Ω–æ–∫")
async def market_menu(msg: Message):
    items = get_market_items()
    text = "<b>üõí –†—ã–Ω–æ–∫ (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤):</b>\n"
    for i, item in enumerate(items, 1):
        text += f"{i}. {item['name']} ‚Äî {item['price']} –∫–æ–∏–Ω–æ–≤"
        if "desc" in item:
            text += f" ({item['desc']})"
        text += "\n"
    text += "\n–î–ª—è –ø–æ–∫—É–ø–∫–∏: —Ä—ã–Ω–æ–∫ –∫—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä"
    await msg.answer(text, parse_mode="HTML")

@dp.message(lambda m: m.text and m.text.lower().startswith("—Ä—ã–Ω–æ–∫ –∫—É–ø–∏—Ç—å"))
async def market_buy(msg: Message):
    parts = msg.text.strip().split()
    if len(parts) < 3 or not parts[2].isdigit():
        await msg.answer("–§–æ—Ä–º–∞—Ç: —Ä—ã–Ω–æ–∫ –∫—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä")
        return
    idx = int(parts[2]) - 1
    items = get_market_items()
    if not (0 <= idx < len(items)):
        await msg.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.")
        return
    item = items[idx]
    user = get_user(msg.from_user.id)
    if user["coins"] < item["price"]:
        await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤.")
        return
    user["coins"] -= item["price"]
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–¥–∞—á—É —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    if "desc" in item:
        user.setdefault("inventory", {})
        user["inventory"][item["name"]] = user["inventory"].get(item["name"], 0) + 1
    else:
        # –ö–∞–∫ –≤ –º–∞–≥–∞–∑–∏–Ω–µ: phone, car, notebook
        if item in phones:
            user["phone"] = item["name"]
        elif item in cars:
            user["car"] = item["name"]
        elif item in laptops:
            user["notebook"] = item["name"]
    update_user(msg.from_user.id, user)
    await msg.answer(f"–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! –¢—ã –∫—É–ø–∏–ª {item['name']}. –û—Å—Ç–∞–ª–æ—Å—å: {user['coins']} –∫–æ–∏–Ω–æ–≤.")

NFT_ITEMS = [
    {"name": "–ê–ª–º–∞–∑ –î—É—Ä–æ–≤–∞", "desc": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π NFT!"},
    {"name": "–¢—Ä—É—Å—ã –î—É—Ä–æ–≤–∞", "desc": "–≠–∫—Å–∫–ª—é–∑–∏–≤!"},
    {"name": "–ó–æ–ª–æ—Ç–∞—è —á–∞—à–∞", "desc": "–†–æ—Å–∫–æ—à—å!"},
]

NFT_PRICE = 100000  # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞

def get_nft_items():
    return NFT_ITEMS

from aiogram.fsm.state import State, StatesGroup
class ShopStates(StatesGroup):
    buying = State()
    nft_buying = State()

@dp.message(lambda m: m.text and m.text.lower() == "–Ω—Ñ—Ç –º–∞–≥–∞–∑–∏–Ω")
async def nft_shop_menu(msg: Message, state: FSMContext):
    text = "<b>üéÅ NFT-–º–∞–≥–∞–∑–∏–Ω</b>\n\n"
    for idx, item in enumerate(get_nft_items(), 1):
        text += f"{idx}. {item['name']} ‚Äî {item['desc']}. –¶–µ–Ω–∞: {NFT_PRICE} –∫–æ–∏–Ω–æ–≤\n"
    text += "\n–î–ª—è –ø–æ–∫—É–ø–∫–∏: –Ω—Ñ—Ç –∫—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä\n–î–ª—è –≤—ã—Ö–æ–¥–∞: –Ω—Ñ—Ç –≤—ã—Ö–æ–¥"
    await msg.answer(text, parse_mode="HTML")
    await state.set_state(ShopStates.nft_buying)

@dp.message(ShopStates.nft_buying)
async def nft_shop_buy(msg: Message, state: FSMContext):
    txt = msg.text.strip().lower()
    if txt == "–Ω—Ñ—Ç –≤—ã—Ö–æ–¥":
        await msg.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ NFT-–º–∞–≥–∞–∑–∏–Ω–∞.")
        await state.clear()
        return

    if txt.startswith("–Ω—Ñ—Ç –∫—É–ø–∏—Ç—å"):
        parts = txt.split()
        if len(parts) < 3 or not parts[2].isdigit():
            await msg.answer("–§–æ—Ä–º–∞—Ç: –Ω—Ñ—Ç –∫—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä")
            return
        idx = int(parts[2]) - 1
        nft_items = get_nft_items()
        if not (0 <= idx < len(nft_items)):
            await msg.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ NFT.")
            return
        user = get_user(msg.from_user.id)
        nft_name = nft_items[idx]["name"]
        if nft_name in user.get("nft_items", []):
            await msg.answer("–≠—Ç–æ—Ç NFT —É–∂–µ —É —Ç–µ–±—è –µ—Å—Ç—å!")
            return
        if user["coins"] < NFT_PRICE:
            await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
            return
        user["coins"] -= NFT_PRICE
        user.setdefault("nft_items", []).append(nft_name)
        update_user(msg.from_user.id, user)
        await msg.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –∫—É–ø–∏–ª NFT: {nft_name} –∑–∞ {NFT_PRICE} –∫–æ–∏–Ω–æ–≤.")
        await state.clear()
        return

    await msg.answer("–î–ª—è –ø–æ–∫—É–ø–∫–∏: –Ω—Ñ—Ç –∫—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä\n–î–ª—è –≤—ã—Ö–æ–¥–∞: –Ω—Ñ—Ç –≤—ã—Ö–æ–¥")


router = Router()

# –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–π "–±–∞–∑—ã" –±–∞–ª–∞–Ω—Å–æ–≤ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ—é —Å–∏—Å—Ç–µ–º—É!)
balances = {}

def get_coins(user_id):
    return balances.get(user_id, 0)

def add_coins(user_id, amount):
    balances[user_id] = get_coins(user_id) + amount

def remove_coins(user_id, amount):
    balances[user_id] = max(0, get_coins(user_id) - amount)

# FSM –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –º–æ–Ω–µ—Ç
class TransferStates(StatesGroup):
    waiting_for_recipient = State()
    waiting_for_amount = State()

# –°—Ç–∞—Ä—Ç –ø–µ—Ä–µ–¥–∞—á–∏
@router.message(lambda m: m.text and m.text.lower().startswith("–ø–µ—Ä–µ–≤–µ—Å—Ç–∏"))
async def transfer_start(msg: Message, state: FSMContext):
    await msg.answer("–£–∫–∞–∂–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –º–æ–Ω–µ—Ç—ã:")
    await state.set_state(TransferStates.waiting_for_recipient)

# –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
@router.message(TransferStates.waiting_for_recipient)
async def transfer_get_recipient(msg: Message, state: FSMContext):
    try:
        recipient_id = int(msg.text.strip())
        if recipient_id == msg.from_user.id:
            await msg.answer("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –º–æ–Ω–µ—Ç—ã —Å–∞–º–æ–º—É —Å–µ–±–µ.")
            return
        await state.update_data(recipient_id=recipient_id)
        await msg.answer("–°–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç –ø–µ—Ä–µ–≤–µ—Å—Ç–∏?")
        await state.set_state(TransferStates.waiting_for_amount)
    except Exception:
        await msg.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ–≤–æ–π ID!")

# –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
@router.message(TransferStates.waiting_for_amount)
async def transfer_get_amount(msg: Message, state: FSMContext):
    try:
        amount = int(msg.text.strip())
        data = await state.get_data()
        recipient_id = data["recipient_id"]
        sender_id = msg.from_user.id

        if amount <= 0:
            await msg.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return
        if get_coins(sender_id) < amount:
            await msg.answer("–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.")
            return

        remove_coins(sender_id, amount)
        add_coins(recipient_id, amount)
        await msg.answer(f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {amount} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}!")
        await state.clear()
    except Exception:
        await msg.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–æ–Ω–µ—Ç.")

from aiogram import Bot, Dispatcher
import asyncio
from anime_vote_handlers import router


from datetime import datetime, timedelta, UTC

PROMO_PARADISE_REWARD = 100_000

@dp.message(lambda m: m.text and m.text.lower() == "–ø—Ä–æ–º–æ–∫–æ–¥ paradise")
async def promo_paradise(msg: types.Message):
    user = get_user(msg.from_user.id)
    now = datetime.now(UTC)
    last = user.get("promo_paradise_last", 0)
    if last:
        last_dt = datetime.fromtimestamp(last, UTC)
        if (now - last_dt) < timedelta(days=7):
            left = timedelta(days=7) - (now - last_dt)
            d, h, m = left.days, left.seconds//3600, (left.seconds//60)%60
            txt = []
            if d: txt.append(f"{d}–¥")
            if h: txt.append(f"{h}—á")
            if m: txt.append(f"{m}–º")
            await msg.answer(f"–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é.\n–û—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å: {' '.join(txt) or '–Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç'}")
            return
    user["coins"] += PROMO_PARADISE_REWARD
    user["promo_paradise_last"] = int(now.timestamp())
    update_user(msg.from_user.id, user)
    await msg.answer(f"üéâ –¢—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥ PARADISE –∏ –ø–æ–ª—É—á–∏–ª {PROMO_PARADISE_REWARD:,} –∫–æ–∏–Ω–æ–≤!\n–î–æ —Å–ª–µ–¥—É—é—â–µ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ‚Äî –Ω–µ–¥–µ–ª—è.")


@dp.message(lambda m: m.text and m.text.lower() == "–±–∞–Ω–∫")
async def bank_status(msg: types.Message):
    balance, last = get_bank(msg.from_user.id)
    last_dt = datetime.datetime.fromtimestamp(last).strftime("%d.%m.%Y %H:%M")
    await msg.answer(f"üè¶ –ë–∞–ª–∞–Ω—Å –≤ –±–∞–Ω–∫–µ: {balance} –∫–æ–∏–Ω–æ–≤\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ: {last_dt}\n"
                     f"–ß—Ç–æ–±—ã –ø–æ–ª–æ–∂–∏—Ç—å –∫–æ–∏–Ω—ã: –±–∞–Ω–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å 123\n–ß—Ç–æ–±—ã —Å–Ω—è—Ç—å: –±–∞–Ω–∫ —Å–Ω—è—Ç—å 123")

@dp.message(lambda m: m.text and m.text.lower().startswith("–±–∞–Ω–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å"))
async def bank_deposit(msg: types.Message):
    parts = msg.text.strip().split()
    if len(parts) < 3 or not parts[2].isdigit():
        await msg.answer("–§–æ—Ä–º–∞—Ç: –±–∞–Ω–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å 123 (–≥–¥–µ 123 ‚Äî —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞)")
        return
    amount = int(parts[2])
    if amount <= 0:
        await msg.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
        return
    ok, txt = deposit(msg.from_user.id, amount)
    await msg.answer(txt)

@dp.message(lambda m: m.text and m.text.lower().startswith("–±–∞–Ω–∫ —Å–Ω—è—Ç—å"))
async def bank_withdraw(msg: types.Message):
    parts = msg.text.strip().split()
    if len(parts) < 3 or not parts[2].isdigit():
        await msg.answer("–§–æ—Ä–º–∞—Ç: –±–∞–Ω–∫ —Å–Ω—è—Ç—å 123 (–≥–¥–µ 123 ‚Äî —Å—É–º–º–∞ —Å–Ω—è—Ç–∏—è)")
        return
    amount = int(parts[2])
    if amount <= 0:
        await msg.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
        return
    ok, txt = withdraw(msg.from_user.id, amount)
    await msg.answer(txt)


# –ê–ù–¢–ò–§–õ–£–î ‚Äî –û–°–¢–ê–í–õ–Ø–ï–ú –¢–û–õ–¨–ö–û –≠–¢–û–¢ –ì–õ–û–ë–ê–õ–¨–ù–´–ô –•–ï–ù–î–õ–ï–†!
@dp.message()
async def filter_ban_mute(msg: Message):
    user = get_user(msg.from_user.id)
    user["messages"] = user.get("messages", 0) + 1
    user["first_name"] = msg.from_user.first_name
    user["username"] = msg.from_user.username
    week_now = datetime.now(UTC).isocalendar()[1]
    month_now = datetime.now(UTC).month
    if user.get("week_reset", week_now) != week_now:
        user["week_messages"] = 0
        user["week_reset"] = week_now
    if user.get("month_reset", month_now) != month_now:
        user["month_messages"] = 0
        user["month_reset"] = month_now
    user["week_messages"] = user.get("week_messages", 0) + 1
    user["month_messages"] = user.get("month_messages", 0) + 1
    user["level"] = calc_level(user["messages"])
    update_user(msg.from_user.id, user)

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
